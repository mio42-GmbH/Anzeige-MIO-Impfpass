{
    "bundles": [
        "<Bundle xmlns="http://hl7.org/fhir">
    <id value="168048d7-c898-4f1a-9492-49087ab43b9b" />
    <meta>
        <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Bundle_Entry|1.1.0" />
    </meta>
    <identifier>
        <system value="urn:ietf:rfc:3986"/>
        <value value="urn:uuid:168048d7-c898-4f1a-9492-49087ab43b9b"/>
    </identifier>
    <type value ="document"/>
    <timestamp value="2014-03-12T16:00:02Z"/>
    <entry>
        <fullUrl value="urn:uuid:e249d43a-0842-443f-87aa-673f1d9a0415"/>
        <resource>
            <Composition>
                <id value="e249d43a-0842-443f-87aa-673f1d9a0415" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Composition_Prime|1.1.0" />
                </meta>
                <text>
                    <status value ="extensions"/>
                     <div xmlns="http://www.w3.org/1999/xhtml">
                        <h1>Composition</h1>
                    </div>
                </text>
                <status value ="final"/>
                <type>
                    <coding>
                        <system value="http://loinc.org" />
                        <code value="11369-6" />
                        <display value="History of Immunization Narrative"/>
                    </coding>
                </type>
                <subject>
                    <reference value ="urn:uuid:9f0ad09d-4148-48b3-b826-83661ef5190e"/>
                </subject>
                <date value="2014-03-12"/>
                <author>
                    <reference value="urn:uuid:78345bc5-f2e0-4978-9e84-18bf01065dc1"/>
                </author>
                <title value="Impfass"/>
                <section>
                    <code>
                        <coding>
                            <system value="http://snomed.info/sct" />
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value="713404003" />
                            <display value="Vaccination given (situation)"/>
                        </coding>
                    </code>
                    <entry>
                        <reference value ="urn:uuid:3fe82bee-05f3-43f6-836d-31d4d7e9f9aa"/>
                    </entry>
                     <entry>
                        <reference value ="urn:uuid:e9da7984-9973-4966-a9f3-2b3531ecb02d"/>
                    </entry>
                </section>
            </Composition>
        </resource>
     </entry>
     <entry>
        <fullUrl value="urn:uuid:3fe82bee-05f3-43f6-836d-31d4d7e9f9aa"/>
        <resource>
            <Immunization>
                <id value="3fe82bee-05f3-43f6-836d-31d4d7e9f9aa"/>
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Record_Prime|1.1.0"/>
                </meta>
                <text>
                    <status value="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                    <h1>Rotavirus-Schluckimpfung</h1>
                    </div>
                </text>
                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Entry_Type">
                    <valueCodeableConcept>
                        <coding>
                            <system value ="https://fhir.kbv.de/CodeSystem/KBV_CS_MIO_Vaccination_Technical_Entry_Type"/>
                            <code value ="Eduii"/>
                            <display value ="Eintrag digital und im Impfausweis"/>
                        </coding>
                    </valueCodeableConcept>
                </extension>
                <extension url = "https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Attester">
                    <extension url= "mode">
                        <valueCodeableConcept>
                            <coding>
                                <system value ="http://hl7.org/fhir/composition-attestation-mode"/>
                                <code value ="legal"/>
                            </coding>
                        </valueCodeableConcept>
                    </extension>
                    <extension url ="party">
                        <valueReference>
                            <reference value ="urn:uuid:78345bc5-f2e0-4978-9e84-18bf01065dc1"/>
                        </valueReference>
                    </extension>
                </extension>
                <status value="completed"/>
                <vaccineCode>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="836387005"/>
                        <display value ="Vaccine product containing Rotavirus antigen (medicinal product)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Rota-Impfstoff"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/dimdi/atc"/>
                        <version value="atcgm2021" />
                        <code value ="J07BH01"/>
                        <display value ="Rotavirus, lebend abgeschwächt"/>
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/ifa/pzn"/>
                        <code value ="12743189"/>
                        <display value ="Rotarix®"/>
                    </coding>
                    <text value ="Rotarix®"/>
                </vaccineCode>
                <patient>
                    <reference value = "urn:uuid:9f0ad09d-4148-48b3-b826-83661ef5190e"/>
                </patient>
                <occurrenceDateTime value ="2014-03-12"/>
                <primarySource value ="true"/>
                <manufacturer>
                    <display value ="GlaxoSmithKline GmbH &amp; Co. KG"/>
                </manufacturer>
                <lotNumber value ="OBD85A737K"/>
                <note> 
                    <text value ="Bei einer ungewöhnlichen Impfreaktion sollte die impfende ärztliche Person benachrichtigt werden. Die ärztlich tätige Person hat, wenn der Verdacht einer gesundheitlichen Schädigung besteht, die über das übliche Ausmaß einer Impfreaktion hinaus geht verpflichtet, den Verdacht dem zuständigen Gesundheitsamt namentlich zu melden (§ 6 Absatz 1 Nr 3 des lnfektionsschutzgesetzes • lfSG) Im Falle eines Impfschadens besteht unter den Voraussetzungen des § 60 Absatz 1 lfSG ein Anspruch auf Entschädigung in entsprechender Anwendung der Vorschriften des Bundesversorgungsgesetzes. Der Antrag ist bei der für die Durchführung des Bundesversorgungsgesetzes zuständigen Behörde (§ 64 Absatz 1 lfSG, i.d.R. 'Versorgungsamt') zu stellen. Weitere Auskünfte erteilt das zuständige Gesundheitsamt."/> 
                </note>
                <protocolApplied>
                    <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Follow_Up">
                    <valueDateTime value ="2014-04-10"/>
                    </extension>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="18624000"/>
                            <display value ="Disease caused by Rotavirus (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Rotaviren-Infektion"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <doseNumberString>
                        <extension url ="http://hl7.org/fhir/StructureDefinition/data-absent-reason">
                            <valueCode value ="unknown"/>
                        </extension>
                    </doseNumberString>
                </protocolApplied>
            </Immunization>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:e9da7984-9973-4966-a9f3-2b3531ecb02d"/>
        <resource>
            <Immunization>
                <id value="e9da7984-9973-4966-a9f3-2b3531ecb02d"/>
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Record_Prime|1.1.0"/>
                </meta>
                <text>
                    <status value="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                    <h1>Impfung Meningokokken-Injektion</h1>
                    </div>
                </text>
                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Entry_Type">
                    <valueCodeableConcept>
                        <coding>
                            <system value ="https://fhir.kbv.de/CodeSystem/KBV_CS_MIO_Vaccination_Technical_Entry_Type"/>
                            <code value ="Eduii"/>
                            <display value ="Eintrag digital und im Impfausweis"/>
                        </coding>
                    </valueCodeableConcept>
                </extension>
                <extension url = "https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Attester">
                    <extension url= "mode">
                        <valueCodeableConcept>
                            <coding>
                                <system value ="http://hl7.org/fhir/composition-attestation-mode"/>
                                <code value ="legal"/>
                            </coding>
                        </valueCodeableConcept>
                    </extension>
                    <extension url ="party">
                        <valueReference>
                            <reference value ="urn:uuid:78345bc5-f2e0-4978-9e84-18bf01065dc1"/>
                        </valueReference>
                    </extension>
                </extension>
                <status value="completed"/>
                <vaccineCode>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="836401009"/>
                        <display value ="Vaccine product containing Neisseria meningitidis antigen (medicinal product)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Meningokokkenimpfstoff"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                     <coding>
                        <system value ="http://fhir.de/CodeSystem/dimdi/atc"/>
                        <version value="atcgm2021" />
                        <code value ="J07AH"/>
                        <display value ="Meningokokken-Impfstoffe"/>
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/ifa/pzn"/>
                        <code value ="09461122"/>
                        <display value ="BEXSERO®"/>
                    </coding>
                    <text value ="BEXSERO®"/>
                </vaccineCode>
                <patient>
                    <reference value = "urn:uuid:9f0ad09d-4148-48b3-b826-83661ef5190e"/>
                </patient>
                <occurrenceDateTime value ="2014-03-12"/>
                <primarySource value ="true"/>
                <manufacturer>
                    <display value ="GlaxoSmithKline GmbH and Co. KG"/>
                </manufacturer>
                <lotNumber value ="142069"/>
                <note> 
                    <text value ="Bei einer ungewöhnlichen Impfreaktion sollte die impfende ärztliche Person benachrichtigt werden. Die ärztlich tätige Person hat, wenn der Verdacht einer gesundheitlichen Schädigung besteht, die über das übliche Ausmaß einer Impfreaktion hinaus geht verpflichtet, den Verdacht dem zuständigen Gesundheitsamt namentlich zu melden (§ 6 Absatz 1 Nr 3 des lnfektionsschutzgesetzes • lfSG) Im Falle eines Impfschadens besteht unter den Voraussetzungen des § 60 Absatz 1 lfSG ein Anspruch auf Entschädigung in entsprechender Anwendung der Vorschriften des Bundesversorgungsgesetzes. Der Antrag ist bei der für die Durchführung des Bundesversorgungsgesetzes zuständigen Behörde (§ 64 Absatz 1 lfSG, i.d.R. 'Versorgungsamt') zu stellen. Weitere Auskünfte erteilt das zuständige Gesundheitsamt."/> 
                </note>
                <protocolApplied>
                    <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Follow_Up">
                    <valueDateTime value ="2014-04-10"/>
                    </extension>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="23511006"/>
                            <display value ="Meningococcal infectious disease (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Meningokokken-Infektion"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <doseNumberString>
                        <extension url ="http://hl7.org/fhir/StructureDefinition/data-absent-reason">
                            <valueCode value ="unknown"/>
                        </extension>
                    </doseNumberString>
                </protocolApplied>
            </Immunization>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:9f0ad09d-4148-48b3-b826-83661ef5190e"/>
        <resource>
            <Patient>
                <id value="9f0ad09d-4148-48b3-b826-83661ef5190e" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Patient|1.1.0" />
                </meta>
                <identifier>
                    <type>
                        <coding>
                            <system value="http://fhir.de/CodeSystem/identifier-type-de-basis" />
                            <code value="GKV" />
                            <display value ="Gesetzliche Krankenversicherung"/>
                        </coding>
                    </type>
                    <system value="http://fhir.de/NamingSystem/gkv/kvid-10" />
                    <value value="B783522772" />
                </identifier>
                <name>
                <use value="official" />
                    <text value="Wiebke Metzger" />
                    <family value="Metzger">
                        <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                            <valueString value="Metzger" />
                        </extension>
                    </family>
                    <given value="Wiebke" />
                </name>
                <gender value="female" />
                <birthDate value="2014-02-17" />
            </Patient> 
        </resource>
    </entry>
    <entry>
    <fullUrl value="urn:uuid:78345bc5-f2e0-4978-9e84-18bf01065dc1"/>
    <resource>
        <PractitionerRole>
            <id value="78345bc5-f2e0-4978-9e84-18bf01065dc1" />
            <meta>
                <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitionerrole|1.1.0" />
            </meta>
            <practitioner>
                <reference value="urn:uuid:8e135d78-f7e0-43a3-b432-747955d85b4c" />
            </practitioner>
            <organization>
                <reference value="urn:uuid:51f5d058-8bb8-41f2-83fd-73e17371cf01" />
            </organization>
        </PractitionerRole>
    </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:8e135d78-f7e0-43a3-b432-747955d85b4c"/>
        <resource>
            <Practitioner>
                <id value="8e135d78-f7e0-43a3-b432-747955d85b4c" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitioner|1.1.0" />
                </meta>
                <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Additional_Comment">
                <valueString value="Behandelnder Arzt" />
                </extension>
                <identifier>
                <type>
                    <coding>
                    <system value="http://terminology.hl7.org/CodeSystem/v2-0203" />
                    <code value="LANR" />
                    </coding>
                </type>
                <system value="https://fhir.kbv.de/NamingSystem/KBV_NS_Base_ANR" />
                <value value="520886234" />
                </identifier>
                <name>
                <use value="official" />
                <family value="Schulz">
                    <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                    <valueString value="Schulz" />
                    </extension>
                </family>
                <given value="Edgar" />
                <prefix value="Dr.">
                    <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier">
                    <valueCode value="AC" />
                    </extension>
                </prefix>
                </name>
                <telecom>
                <system value="phone" />
                <value value="+49(0)9853111893" />
                </telecom>
                <qualification>
                    <code>
                        <coding>
                        <system value="https://fhir.kbv.de/CodeSystem/KBV_CS_SFHIR_BAR2_WBO" />
                        <code value="341" />
                        <display value="FA Kinder- und Jugendmedizin"/>
                        </coding>
                    </code>
                </qualification>
            </Practitioner>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:51f5d058-8bb8-41f2-83fd-73e17371cf01"/>
        <resource>
            <Organization>
                <id value="51f5d058-8bb8-41f2-83fd-73e17371cf01" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Organization|1.1.0" />
                </meta>
                <name value="Praxis Dr. Edgar Schulz" />
                <address>
                    <type value="both" />
                    <line value="Wladimir-Wiese-Straße 9/8">
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber">
                            <valueString value="9/8" />
                        </extension>
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName">
                            <valueString value="Wladimir-Wiese-Straße" />
                        </extension>
                    </line>
                    <city value="Viersen" />
                    <postalCode value="37220" />
                    <country value="D" />
                </address>
            </Organization>
        </resource>
    </entry>
</Bundle>",
        "<Bundle xmlns="http://hl7.org/fhir">
    <id value="8236bfb6-3bce-4fb4-825a-737d5f6c9632" />
    <meta>
        <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Bundle_Entry|1.1.0" />
    </meta>
    <identifier>
        <system value="urn:ietf:rfc:3986"/>
        <value value="urn:uuid:8236bfb6-3bce-4fb4-825a-737d5f6c9632"/>
    </identifier>
    <type value ="document"/>
    <timestamp value="2014-03-26T16:00:02Z"/>
    <entry>
        <fullUrl value="urn:uuid:6fab394b-cc69-4b18-81ef-b9995a76ef58"/>
        <resource>
            <Composition>
                <id value="6fab394b-cc69-4b18-81ef-b9995a76ef58" />
                    <meta>
                        <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Composition_Prime|1.1.0" />
                    </meta>
                    <text>
                        <status value ="extensions"/>
                        <div xmlns="http://www.w3.org/1999/xhtml">
                            <h1>Composition</h1>
                        </div>
                    </text>
                    <status value ="final"/>
                    <type>
                        <coding>
                            <system value="http://loinc.org" />
                            <code value="11369-6" />
                            <display value="History of Immunization Narrative"/>
                        </coding>
                    </type>
                    <subject>
                        <reference value ="urn:uuid:c3bdb119-fe2c-4585-ac40-c94c92a99896"/>
                    </subject>
                    <date value="2014-03-26"/>
                    <author>
                        <reference value="urn:uuid:5b02cdd0-99f3-4141-bc4a-a61330083b2c"/>
                    </author>
                    <title value="Impfass"/>
                    <section>
                        <code>
                            <coding>
                                <system value="http://snomed.info/sct" />
                                <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                                <code value="713404003" />
                                <display value="Vaccination given (situation)"/>
                            </coding>
                        </code>
                        <entry>
                            <reference value ="urn:uuid:fb9333c3-079b-4d13-b270-742222887a83"/>
                        </entry>
                        <entry>
                            <reference value ="urn:uuid:0761370e-c867-4e3b-af34-b7e4fd3b90ab"/>
                        </entry>
                    </section>
            </Composition>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:fb9333c3-079b-4d13-b270-742222887a83"/>
        <resource>
            <Immunization>
                <id value="fb9333c3-079b-4d13-b270-742222887a83"/>
                  <meta>
        <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Record_Prime|1.1.0"/>
                </meta>
                <text>
                    <status value="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                    <h1>Pneumokokken-Injektion</h1>
                    </div>
                </text>
                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Entry_Type">
                    <valueCodeableConcept>
                        <coding>
                            <system value ="https://fhir.kbv.de/CodeSystem/KBV_CS_MIO_Vaccination_Technical_Entry_Type"/>
                            <code value ="Eduii"/>
                            <display value ="Eintrag digital und im Impfausweis"/>
                        </coding>
                    </valueCodeableConcept>
                </extension>
                <extension url = "https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Attester">
                    <extension url= "mode">
                        <valueCodeableConcept>
                            <coding>
                                <system value ="http://hl7.org/fhir/composition-attestation-mode"/>
                                <code value ="legal"/>
                            </coding>
                        </valueCodeableConcept>
                    </extension>
                    <extension url ="party">
                        <valueReference>
                            <reference value ="urn:uuid:5b02cdd0-99f3-4141-bc4a-a61330083b2c"/>
                        </valueReference>
                    </extension>
                </extension>
                <status value="completed"/>
                <vaccineCode>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="836398006"/>
                        <display value ="Vaccine product containing Streptococcus pneumoniae antigen (medicinal product)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Pneumokokkenimpfstoff"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/dimdi/atc"/>
                        <version value="atcgm2021" />
                        <code value ="J07AL"/>
                        <display value ="Pneumokokken-Impfstoffe"/>
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/ifa/pzn"/>
                        <code value ="05496276"/>
                        <display value ="Prevenar 13®"/>
                    </coding>
                    <text value ="Prevenar 13®"/>
                </vaccineCode>
                <patient>
                    <reference value ="urn:uuid:c3bdb119-fe2c-4585-ac40-c94c92a99896"/>
                </patient>
                <occurrenceDateTime value ="2014-03-26"/>
                <primarySource value ="true"/>
                <manufacturer>
                    <display value ="Pfizer Pharma GmbH"/>
                </manufacturer>
                <lotNumber value ="H25381"/>
                <note> 
                    <text value ="Bei einer ungewöhnlichen Impfreaktion sollte die impfende ärztliche Person benachrichtigt werden. Die ärztlich tätige Person hat, wenn der Verdacht einer gesundheitlichen Schädigung besteht, die über das übliche Ausmaß einer Impfreaktion hinaus geht verpflichtet, den Verdacht dem zuständigen Gesundheitsamt namentlich zu melden (§ 6 Absatz 1 Nr 3 des lnfektionsschutzgesetzes • lfSG) Im Falle eines Impfschadens besteht unter den Voraussetzungen des § 60 Absatz 1 lfSG ein Anspruch auf Entschädigung in entsprechender Anwendung der Vorschriften des Bundesversorgungsgesetzes. Der Antrag ist bei der für die Durchführung des Bundesversorgungsgesetzes zuständigen Behörde (§ 64 Absatz 1 lfSG, i.d.R. 'Versorgungsamt') zu stellen. Weitere Auskünfte erteilt das zuständige Gesundheitsamt."/> 
                </note>
                <protocolApplied>
                    <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Follow_Up">
                    <valueDateTime value ="2014-04-28"/>
                    </extension>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="16814004"/>
                            <display value ="Pneumococcal infectious disease (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Pneumokokken-Infektion"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <doseNumberString>
                        <extension url ="http://hl7.org/fhir/StructureDefinition/data-absent-reason">
                            <valueCode value ="unknown"/>
                        </extension>
                    </doseNumberString>
                </protocolApplied>
            </Immunization>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:0761370e-c867-4e3b-af34-b7e4fd3b90ab"/>
        <resource>
            <Immunization>
                <id value="0761370e-c867-4e3b-af34-b7e4fd3b90ab"/>
                <meta>
        <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Record_Prime|1.1.0"/>
                </meta>
                <text>
                    <status value="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                    <h1>Tetanus,Diptherie,Pertussis,Poliomyelitis,Haemophilus influenzae b,Hepatitis B</h1>
                    </div>
                </text>
                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Entry_Type">
                    <valueCodeableConcept>
                        <coding>
                            <system value ="https://fhir.kbv.de/CodeSystem/KBV_CS_MIO_Vaccination_Technical_Entry_Type"/>
                            <code value ="Eduii"/>
                            <display value ="Eintrag digital und im Impfausweis"/>
                        </coding>
                    </valueCodeableConcept>
                </extension>
                <extension url = "https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Attester">
                    <extension url= "mode">
                        <valueCodeableConcept>
                            <coding>
                                <system value ="http://hl7.org/fhir/composition-attestation-mode"/>
                                <code value ="legal"/>
                            </coding>
                        </valueCodeableConcept>
                    </extension>
                    <extension url ="party">
                        <valueReference>
                            <reference value ="urn:uuid:5b02cdd0-99f3-4141-bc4a-a61330083b2c"/>
                        </valueReference>
                    </extension>
                </extension>
                <status value="completed"/>
                <vaccineCode>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="871895005"/>
                        <display value ="Vaccine product containing only Bordetella pertussis and Clostridium tetani and Corynebacterium diphtheriae and Haemophilus influenzae type B and Hepatitis B virus and Human poliovirus antigens (medicinal product)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Diphtherie-Haemophilus influenzae B-Pertussis, Poliomyelitis, Tetanus, Hepatitis B-Impfstoff"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/dimdi/atc"/>
                        <version value="atcgm2021" />
                        <code value ="J07CA09"/>
                        <display value ="Diphtherie-Haemophilus influenzae  B-Pertussis-Poliomyelitis-Tetanus-Hepatitis B"/>
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/ifa/pzn"/>
                        <code value ="10538539"/>
                        <display value ="Infanrix hexa®"/>
                    </coding>
                    <text value ="Infanrix hexa®"/>
                </vaccineCode>
                <patient>
                    <reference value ="urn:uuid:c3bdb119-fe2c-4585-ac40-c94c92a99896"/>
                </patient>
                <occurrenceDateTime value ="2014-03-26"/>
                <primarySource value ="true"/>
                <manufacturer>
                    <display value ="GlaxoSmithKline GmbH &amp; Co. KG"/>
                </manufacturer>
                <lotNumber value ="SIG116453"/>
                <note> 
                    <text value ="Bei einer ungewöhnlichen Impfreaktion sollte die impfende ärztliche Person benachrichtigt werden. Die ärztlich tätige Person hat, wenn der Verdacht einer gesundheitlichen Schädigung besteht, die über das übliche Ausmaß einer Impfreaktion hinaus geht verpflichtet, den Verdacht dem zuständigen Gesundheitsamt namentlich zu melden (§ 6 Absatz 1 Nr 3 des lnfektionsschutzgesetzes • lfSG) Im Falle eines Impfschadens besteht unter den Voraussetzungen des § 60 Absatz 1 lfSG ein Anspruch auf Entschädigung in entsprechender Anwendung der Vorschriften des Bundesversorgungsgesetzes. Der Antrag ist bei der für die Durchführung des Bundesversorgungsgesetzes zuständigen Behörde (§ 64 Absatz 1 lfSG, i.d.R. 'Versorgungsamt') zu stellen. Weitere Auskünfte erteilt das zuständige Gesundheitsamt."/> 
                </note>
                <protocolApplied>
                    <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Follow_Up">
                    <valueDateTime value ="2014-04-28"/>
                    </extension>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="76902006"/>
                            <display value ="Tetanus (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Tetanus-Infektion"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="397430003"/>
                            <display value ="Diphtheria caused by Corynebacterium diphtheriae (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Diphtherie"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="27836007"/>
                            <display value ="Pertussis (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Pertussis"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="398102009"/>
                            <display value ="Acute poliomyelitis (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Poliomyelitis"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="709410003"/>
                            <display value ="Haemophilus influenzae type b infection (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Haemophilus-influenzae-Typ-B-Infektion"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="66071002"/>
                            <display value ="Viral hepatitis type B (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Hepatitis B"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <doseNumberString>
                        <extension url ="http://hl7.org/fhir/StructureDefinition/data-absent-reason">
                            <valueCode value ="unknown"/>
                        </extension>
                    </doseNumberString>
                </protocolApplied>
            </Immunization>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:1d872443-5157-43bd-b87d-940acddf56eb"/>
        <resource>
            <Organization>
                <id value="1d872443-5157-43bd-b87d-940acddf56eb" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Organization|1.1.0" />
                </meta>
                <name value="Praxis Dr. Edgar Schulz" />
                <address>
                    <type value="both" />
                    <line value="Wladimir-Wiese-Straße 9/8">
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber">
                            <valueString value="9/8" />
                        </extension>
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName">
                            <valueString value="Wladimir-Wiese-Straße" />
                        </extension>
                    </line>
                    <city value="Viersen" />
                    <postalCode value="37220" />
                    <country value="D" />
                </address>
            </Organization>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:c3bdb119-fe2c-4585-ac40-c94c92a99896"/>
        <resource>
            <Patient>
                <id value="c3bdb119-fe2c-4585-ac40-c94c92a99896" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Patient|1.1.0" />
                </meta>
                <identifier>
                    <type>
                        <coding>
                            <system value="http://fhir.de/CodeSystem/identifier-type-de-basis" />
                            <code value="GKV" />
                            <display value ="Gesetzliche Krankenversicherung"/>
                        </coding>
                    </type>
                    <system value="http://fhir.de/NamingSystem/gkv/kvid-10" />
                    <value value="B783522772" />
                </identifier>
                <name>
                <use value="official" />
                    <text value="Wiebke Metzger" />
                    <family value="Metzger">
                        <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                            <valueString value="Metzger" />
                        </extension>
                    </family>
                    <given value="Wiebke" />
                </name>
                <gender value="female" />
                <birthDate value="2014-02-17" />
            </Patient>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:7eaf4263-f679-4e0e-b3f9-99ca1e412d15"/>
        <resource>
            <Practitioner>
                <id value="7eaf4263-f679-4e0e-b3f9-99ca1e412d15" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitioner|1.1.0" />
                </meta>
                <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Additional_Comment">
                <valueString value="Behandelnder Arzt" />
                </extension>
                <identifier>
                <type>
                    <coding>
                    <system value="http://terminology.hl7.org/CodeSystem/v2-0203" />
                    <code value="LANR" />
                    </coding>
                </type>
                <system value="https://fhir.kbv.de/NamingSystem/KBV_NS_Base_ANR" />
                <value value="520886234" />
                </identifier>
                <name>
                <use value="official" />
                <family value="Schulz">
                    <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                    <valueString value="Schulz" />
                    </extension>
                </family>
                <given value="Edgar" />
                <prefix value="Dr.">
                    <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier">
                    <valueCode value="AC" />
                    </extension>
                </prefix>
                </name>
                <telecom>
                <system value="phone" />
                <value value="+49(0)9853111893" />
                </telecom>
            <qualification>
                <code>
                    <coding>
                    <system value="https://fhir.kbv.de/CodeSystem/KBV_CS_SFHIR_BAR2_WBO" />
                    <code value="341" />
                    <display value="FA Kinder- und Jugendmedizin"/>
                    </coding>
                </code>
                </qualification>
            </Practitioner>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:5b02cdd0-99f3-4141-bc4a-a61330083b2c"/>
        <resource>
            <PractitionerRole>
                <id value="5b02cdd0-99f3-4141-bc4a-a61330083b2c" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitionerrole|1.1.0" />
                </meta>
                <practitioner>
                    <reference value="urn:uuid:7eaf4263-f679-4e0e-b3f9-99ca1e412d15" />
                </practitioner>
                <organization>
                    <reference value="urn:uuid:1d872443-5157-43bd-b87d-940acddf56eb" />
                </organization>
                </PractitionerRole>
        </resource>
    </entry>
</Bundle>",
        "<Bundle xmlns="http://hl7.org/fhir">
    <id value="210587bf-9387-48e3-9ebc-5d5f95fde729" />
    <meta>
        <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Bundle_Entry|1.1.0" />
    </meta>
    <identifier>
        <system value="urn:ietf:rfc:3986"/>
        <value value="urn:uuid:210587bf-9387-48e3-9ebc-5d5f95fde729"/>
    </identifier>
    <type value ="document"/>
    <timestamp value="2014-10-04T16:00:02Z"/>
    <entry>
        <fullUrl value="urn:uuid:1c71aa35-7ccc-4691-8f70-bd2ab5e6dead"/>
        <resource>
            <Composition>
                <id value="1c71aa35-7ccc-4691-8f70-bd2ab5e6dead" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Composition_Prime|1.1.0" />
                </meta>
                <text>
                    <status value ="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                        <h1>Composition</h1>
                    </div>
                </text>
                <status value ="final"/>
                <type>
                    <coding>
                        <system value="http://loinc.org" />
                        <code value="11369-6" />
                        <display value="History of Immunization Narrative"/>
                    </coding>
                </type>
                <subject>
                    <reference value ="urn:uuid:566ce82c-c77e-4158-993c-7aee9d16b2d0"/>
                </subject>
                <date value="2022-10-07"/>
                <author>
                    <reference value="urn:uuid:7b4b1dc7-b47a-4440-a955-1112930441f3"/>
                </author>
                <title value="Impfass"/>
                <section>
                    <code>
                        <coding>
                            <system value="http://snomed.info/sct" />
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value="713404003" />
                            <display value="Vaccination given (situation)"/>
                        </coding>
                    </code>
                    <entry>
                        <reference value ="urn:uuid:72d948f1-71a0-4553-a971-ff417c57fea1"/>
                    </entry>
                    <entry>
                        <reference value ="urn:uuid:8a963fa3-b27c-4076-b700-e7e31ca7dfe3"/>
                    </entry>
                </section>
            </Composition>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:72d948f1-71a0-4553-a971-ff417c57fea1"/>
        <resource>
        <Immunization>
            <id value="72d948f1-71a0-4553-a971-ff417c57fea1"/>
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Record_Prime|1.1.0"/>
                </meta>
                <text>
                    <status value="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                    <h1>Rotavirus-Schluckimpfung</h1>
                    </div>
                </text>
                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Entry_Type">
                    <valueCodeableConcept>
                        <coding>
                            <system value ="https://fhir.kbv.de/CodeSystem/KBV_CS_MIO_Vaccination_Technical_Entry_Type"/>
                            <code value ="Eduii"/>
                            <display value ="Eintrag digital und im Impfausweis"/>
                        </coding>
                    </valueCodeableConcept>
                </extension>
                <extension url = "https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Attester">
                    <extension url= "mode">
                        <valueCodeableConcept>
                            <coding>
                                <system value ="http://hl7.org/fhir/composition-attestation-mode"/>
                                <code value ="legal"/>
                            </coding>
                        </valueCodeableConcept>
                    </extension>
                    <extension url ="party">
                        <valueReference>
                            <reference value ="urn:uuid:7b4b1dc7-b47a-4440-a955-1112930441f3"/>
                        </valueReference>
                    </extension>
                </extension>
                <status value="completed"/>
                <vaccineCode>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="836387005"/>
                        <display value ="Vaccine product containing Rotavirus antigen (medicinal product)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Rota-Impfstoff"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/dimdi/atc"/>
                        <version value="atcgm2021" />
                        <code value ="J07BH01"/>
                        <display value ="Rotavirus, lebend abgeschwächt"/>
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/ifa/pzn"/>
                        <code value ="12743189"/>
                        <display value ="Rotarix®"/>
                    </coding>
                    <text value ="Rotarix®"/>
                </vaccineCode>
                <patient>
                    <reference value ="urn:uuid:566ce82c-c77e-4158-993c-7aee9d16b2d0"/>
                </patient>
                <occurrenceDateTime value ="2014-04-10"/>
                <primarySource value ="true"/>
                <manufacturer>
                    <display value ="GlaxoSmithKline GmbH &amp; Co. KG"/>
                </manufacturer>
                <lotNumber value ="JJF6M1THFK"/>
                <note> 
                    <text value ="Bei einer ungewöhnlichen Impfreaktion sollte die impfende ärztliche Person benachrichtigt werden. Die ärztlich tätige Person hat, wenn der Verdacht einer gesundheitlichen Schädigung besteht, die über das übliche Ausmaß einer Impfreaktion hinaus geht verpflichtet, den Verdacht dem zuständigen Gesundheitsamt namentlich zu melden (§ 6 Absatz 1 Nr 3 des lnfektionsschutzgesetzes • lfSG) Im Falle eines Impfschadens besteht unter den Voraussetzungen des § 60 Absatz 1 lfSG ein Anspruch auf Entschädigung in entsprechender Anwendung der Vorschriften des Bundesversorgungsgesetzes. Der Antrag ist bei der für die Durchführung des Bundesversorgungsgesetzes zuständigen Behörde (§ 64 Absatz 1 lfSG, i.d.R. 'Versorgungsamt') zu stellen. Weitere Auskünfte erteilt das zuständige Gesundheitsamt."/> 
                </note>
                <protocolApplied>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="18624000"/>
                            <display value ="Disease caused by Rotavirus (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Rotaviren-Infektion"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <doseNumberString>
                        <extension url ="http://hl7.org/fhir/StructureDefinition/data-absent-reason">
                            <valueCode value ="unknown"/>
                        </extension>
                    </doseNumberString>
                </protocolApplied>
            </Immunization>
        </resource>
    </entry>
    <entry>
        <fullUrl value ="urn:uuid:8a963fa3-b27c-4076-b700-e7e31ca7dfe3"/>
        <resource>
            <Immunization>
                <id value="8a963fa3-b27c-4076-b700-e7e31ca7dfe3"/>
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Record_Prime|1.1.0"/>
                </meta>
                <text>
                    <status value="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                    <h1>Meningokokken</h1>
                    </div>
                </text>
                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Entry_Type">
                    <valueCodeableConcept>
                         <coding>
                            <system value ="https://fhir.kbv.de/CodeSystem/KBV_CS_MIO_Vaccination_Technical_Entry_Type"/>
                            <code value ="Eduii"/>
                            <display value ="Eintrag digital und im Impfausweis"/>
                        </coding>
                    </valueCodeableConcept>
                </extension>
                <extension url = "https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Attester">
                    <extension url= "mode">
                        <valueCodeableConcept>
                             <coding>
                                <system value ="http://hl7.org/fhir/composition-attestation-mode"/>
                                <code value ="legal"/>
                            </coding>
                        </valueCodeableConcept>
                    </extension>
                    <extension url ="party">
                        <valueReference>
                            <reference value ="urn:uuid:7b4b1dc7-b47a-4440-a955-1112930441f3"/>
                        </valueReference>
                    </extension>
                </extension>
                <status value="completed"/>
                <vaccineCode>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="836401009"/>
                        <display value ="Vaccine product containing Neisseria meningitidis antigen (medicinal product)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Meningokokkenimpfstoff"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/dimdi/atc"/>
                        <version value="atcgm2021" />
                        <code value ="J07AH"/>
                        <display value ="Meningokokken-Impfstoffe"/>
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/ifa/pzn"/>
                        <code value ="09461122"/>
                        <display value ="BEXSERO®"/>
                    </coding>
                    <text value ="BEXSERO®"/>
                    </vaccineCode>
                    <patient>
                        <reference value ="urn:uuid:566ce82c-c77e-4158-993c-7aee9d16b2d0"/>
                    </patient>
                    <occurrenceDateTime value ="2014-10-04"/>
                    <primarySource value ="true"/>
                    <manufacturer>
                        <display value ="GlaxoSmithKline GmbH &amp; Co. KG"/>
                    </manufacturer>
                    <lotNumber value ="142069A"/>
                    <note> 
                        <text value ="Bei einer ungewöhnlichen Impfreaktion sollte die impfende ärztliche Person benachrichtigt werden. Die ärztlich tätige Person hat, wenn der Verdacht einer gesundheitlichen Schädigung besteht, die über das übliche Ausmaß einer Impfreaktion hinaus geht verpflichtet, den Verdacht dem zuständigen Gesundheitsamt namentlich zu melden (§ 6 Absatz 1 Nr 3 des lnfektionsschutzgesetzes • lfSG) Im Falle eines Impfschadens besteht unter den Voraussetzungen des § 60 Absatz 1 lfSG ein Anspruch auf Entschädigung in entsprechender Anwendung der Vorschriften des Bundesversorgungsgesetzes. Der Antrag ist bei der für die Durchführung des Bundesversorgungsgesetzes zuständigen Behörde (§ 64 Absatz 1 lfSG, i.d.R. 'Versorgungsamt') zu stellen. Weitere Auskünfte erteilt das zuständige Gesundheitsamt."/> 
                    </note>
                    <protocolApplied>
                        <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Follow_Up">
                        <valueDateTime value ="2014-05-21"/>
                        </extension>
                        <targetDisease>
                            <coding>
                                <system value ="http://snomed.info/sct"/>
                                <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                                <code value ="23511006"/>
                                <display value ="Meningococcal infectious disease (disorder)">
                                    <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                        <extension url ="content">
                                            <valueString value ="Meningokokken-Infektion"/>
                                        </extension>
                                    </extension>
                                </display>         
                            </coding>
                        </targetDisease>
                        <doseNumberString>
                            <extension url ="http://hl7.org/fhir/StructureDefinition/data-absent-reason">
                                <valueCode value ="unknown"/>
                            </extension>
                        </doseNumberString>
                    </protocolApplied>
            </Immunization>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:aa80d007-04f3-4045-92b6-d55c2008d610"/>
        <resource>
            <Organization>
                    <id value="aa80d007-04f3-4045-92b6-d55c2008d610" />
                    <meta>
                        <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Organization|1.1.0" />
                    </meta>
                    <name value="Praxis Dr. Edgar Schulz" />
                    <address>
                        <type value="both" />
                        <line value="Wladimir-Wiese-Straße 9/8">
                            <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber">
                                <valueString value="9/8" />
                            </extension>
                            <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName">
                                <valueString value="Wladimir-Wiese-Straße" />
                            </extension>
                        </line>
                        <city value="Viersen" />
                        <postalCode value="37220" />
                        <country value="D" />
                    </address>
            </Organization>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:566ce82c-c77e-4158-993c-7aee9d16b2d0"/>
        <resource>
            <Patient>
                <id value="566ce82c-c77e-4158-993c-7aee9d16b2d0" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Patient|1.1.0" />
                </meta>
                <identifier>
                    <type>
                        <coding>
                            <system value="http://fhir.de/CodeSystem/identifier-type-de-basis" />
                            <code value="GKV" />
                            <display value ="Gesetzliche Krankenversicherung"/>
                        </coding>
                    </type>
                    <system value="http://fhir.de/NamingSystem/gkv/kvid-10" />
                    <value value="B783522772" />
                </identifier>
                <name>
                <use value="official" />
                    <text value="Wiebke Metzger" />
                    <family value="Metzger">
                        <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                            <valueString value="Metzger" />
                        </extension>
                    </family>
                    <given value="Wiebke" />
                </name>
                <gender value="female" />
                <birthDate value="2014-02-17" />
            </Patient>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:e85af249-93fc-4f7f-ada8-6b72c29ae30b"/>
        <resource>
            <Practitioner>
                <id value="e85af249-93fc-4f7f-ada8-6b72c29ae30b" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitioner|1.1.0" />
                </meta>
                <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Additional_Comment">
                <valueString value="Behandelnder Arzt" />
                </extension>
                <identifier>
                <type>
                    <coding>
                    <system value="http://terminology.hl7.org/CodeSystem/v2-0203" />
                    <code value="LANR" />
                    </coding>
                </type>
                <system value="https://fhir.kbv.de/NamingSystem/KBV_NS_Base_ANR" />
                <value value="520886234" />
                </identifier>
                <name>
                <use value="official" />
                <family value="Schulz">
                    <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                    <valueString value="Schulz" />
                    </extension>
                </family>
                <given value="Edgar" />
                <prefix value="Dr.">
                    <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier">
                    <valueCode value="AC" />
                    </extension>
                </prefix>
                </name>
                <telecom>
                <system value="phone" />
                <value value="+49(0)9853111893" />
                </telecom>
            <qualification>
                <code>
                    <coding>
                    <system value="https://fhir.kbv.de/CodeSystem/KBV_CS_SFHIR_BAR2_WBO" />
                    <code value="341" />
                    <display value="FA Kinder- und Jugendmedizin"/>
                    </coding>
                </code>
                </qualification>
            </Practitioner>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:7b4b1dc7-b47a-4440-a955-1112930441f3"/>
        <resource>
            <PractitionerRole xmlns="http://hl7.org/fhir">
                <id value="7b4b1dc7-b47a-4440-a955-1112930441f3" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitionerrole|1.1.0" />
                </meta>
                <practitioner>
                    <reference value="urn:uuid:e85af249-93fc-4f7f-ada8-6b72c29ae30b" />
                </practitioner>
                <organization>
                    <reference value="urn:uuid:aa80d007-04f3-4045-92b6-d55c2008d610" />
                </organization>
            </PractitionerRole>
        </resource>
    </entry>
</Bundle>",
        "<Bundle xmlns="http://hl7.org/fhir">
    <id value="41851058-2767-4a4f-a925-253ae10e1092" />
    <meta>
        <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Bundle_Entry|1.1.0" />
    </meta>
    <identifier>
        <system value="urn:ietf:rfc:3986"/>
        <value value="urn:uuid:41851058-2767-4a4f-a925-253ae10e1092"/>
    </identifier>
    <type value ="document"/>
    <timestamp value="2014-04-28T16:00:02Z"/>
    <entry>
        <fullUrl value="urn:uuid:14383c54-532d-464f-95d1-b3e598e62264"/>
        <resource>
            <Composition>
                <id value="14383c54-532d-464f-95d1-b3e598e62264" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Composition_Prime|1.1.0" />
                </meta>
                <text>
                    <status value ="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                        <h1>Composition</h1>
                    </div>
                </text>
                <status value ="final"/>
                <type>
                    <coding>
                        <system value="http://loinc.org" />
                        <code value="11369-6" />
                        <display value="History of Immunization Narrative"/>
                    </coding>
                </type>
                <subject>
                    <reference value ="urn:uuid:86ae5944-1282-421d-a842-212e5e313442"/>
                </subject>
                <date value="2014-04-28"/>
                <author>
                    <reference value ="urn:uuid:d17f1bec-4561-4b3f-8fbf-898b005018e2"/>
                </author>
                <title value="Impfass"/>
                <section>
                    <code>
                        <coding>
                            <system value="http://snomed.info/sct" />
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value="713404003" />
                            <display value="Vaccination given (situation)"/>
                        </coding>
                    </code>
                    <entry>
                        <reference value ="urn:uuid:e115f03e-92ba-4b6b-a651-6527652fe803"/>
                    </entry>
                    <entry>
                        <reference value ="urn:uuid:d92fab06-c0c7-4eaa-9d7a-e5d4a1b0570c"/>
                    </entry>
                </section>
            </Composition>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:e115f03e-92ba-4b6b-a651-6527652fe803"/>
        <resource>
            <Immunization>
                <id value="e115f03e-92ba-4b6b-a651-6527652fe803"/>
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Record_Prime|1.1.0"/>
                </meta>
                <text>
                    <status value="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                    <h1>Pneumokokkenimpfstoff</h1>
                    </div>
                </text>
                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Entry_Type">
                    <valueCodeableConcept>
                        <coding>
                            <system value ="https://fhir.kbv.de/CodeSystem/KBV_CS_MIO_Vaccination_Technical_Entry_Type"/>
                            <code value ="Eduii"/>
                            <display value ="Eintrag digital und im Impfausweis"/>
                        </coding>
                    </valueCodeableConcept>
                </extension>
                <extension url = "https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Attester">
                    <extension url= "mode">
                        <valueCodeableConcept>
                            <coding>
                                <system value ="http://hl7.org/fhir/composition-attestation-mode"/>
                                <code value ="legal"/>
                            </coding>
                        </valueCodeableConcept>
                    </extension>
                    <extension url ="party">
                        <valueReference>
                            <reference value ="urn:uuid:d17f1bec-4561-4b3f-8fbf-898b005018e2"/>
                        </valueReference>
                    </extension>
                </extension>
                <status value="completed"/>
                <vaccineCode>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="836398006"/>
                        <display value ="Vaccine product containing Streptococcus pneumoniae antigen (medicinal product)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Pneumokokkenimpfstoff"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/dimdi/atc"/>
                        <version value="atcgm2021" />
                        <code value ="J07AL"/>
                        <display value ="Pneumokokken-Impfstoffe"/>
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/ifa/pzn"/>
                        <code value ="05496276"/>
                        <display value ="Prevenar 13®"/>
                    </coding>
                    <text value ="Prevenar 13®"/>
                </vaccineCode>
                <patient>
                    <reference value ="urn:uuid:86ae5944-1282-421d-a842-212e5e313442"/>
                </patient>
                <occurrenceDateTime value ="2014-04-28"/>
                <primarySource value ="true"/>
                <manufacturer>
                    <display value ="Pfizer Pharma GmbH"/>
                </manufacturer>
                <lotNumber value ="H25381"/>
                <note> 
                    <text value ="Bei einer ungewöhnlichen Impfreaktion sollte die impfende ärztliche Person benachrichtigt werden. Die ärztlich tätige Person hat, wenn der Verdacht einer gesundheitlichen Schädigung besteht, die über das übliche Ausmaß einer Impfreaktion hinaus geht verpflichtet, den Verdacht dem zuständigen Gesundheitsamt namentlich zu melden (§ 6 Absatz 1 Nr 3 des lnfektionsschutzgesetzes • lfSG) Im Falle eines Impfschadens besteht unter den Voraussetzungen des § 60 Absatz 1 lfSG ein Anspruch auf Entschädigung in entsprechender Anwendung der Vorschriften des Bundesversorgungsgesetzes. Der Antrag ist bei der für die Durchführung des Bundesversorgungsgesetzes zuständigen Behörde (§ 64 Absatz 1 lfSG, i.d.R. 'Versorgungsamt') zu stellen. Weitere Auskünfte erteilt das zuständige Gesundheitsamt."/> 
                </note>
                <protocolApplied>
                    <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Follow_Up">
                    <valueDateTime value ="2014-06-04"/>
                    </extension>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="16814004"/>
                            <display value ="Pneumococcal infectious disease (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Pneumokokken-Infektion"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <doseNumberString>
                        <extension url ="http://hl7.org/fhir/StructureDefinition/data-absent-reason">
                            <valueCode value ="unknown"/>
                        </extension>
                    </doseNumberString>
                </protocolApplied>
            </Immunization>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:d92fab06-c0c7-4eaa-9d7a-e5d4a1b0570c"/>
        <resource>
            <Immunization>
                <id value="d92fab06-c0c7-4eaa-9d7a-e5d4a1b0570c"/>
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Record_Prime|1.1.0"/>
                </meta>
                <text>
                    <status value="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                    <h1>Tetanus, Diphterie, Pertussis, Poliomyelitis, Haemophilus influenzae b, Hepatitis B</h1>
                    </div>
                </text>
                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Entry_Type">
                    <valueCodeableConcept>
                        <coding>
                            <system value ="https://fhir.kbv.de/CodeSystem/KBV_CS_MIO_Vaccination_Technical_Entry_Type"/>
                            <code value ="Eduii"/>
                            <display value ="Eintrag digital und im Impfausweis"/>
                        </coding>
                    </valueCodeableConcept>
                </extension>
                <extension url = "https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Attester">
                    <extension url= "mode">
                        <valueCodeableConcept>
                            <coding>
                                <system value ="http://hl7.org/fhir/composition-attestation-mode"/>
                                <code value ="legal"/>
                            </coding>
                        </valueCodeableConcept>
                    </extension>
                    <extension url ="party">
                        <valueReference>
                            <reference value ="urn:uuid:d17f1bec-4561-4b3f-8fbf-898b005018e2"/>
                        </valueReference>
                    </extension>
                </extension>
                <status value="completed"/>
                <vaccineCode>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="871895005"/>
                        <display value ="Vaccine product containing only Bordetella pertussis and Clostridium tetani and Corynebacterium diphtheriae and Haemophilus influenzae type B and Hepatitis B virus and Human poliovirus antigens (medicinal product)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Diphtherie-Haemophilus influenzae B-Pertussis, Poliomyelitis, Tetanus, Hepatitis B-Impfstoff"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/dimdi/atc"/>
                        <version value="atcgm2021" />
                        <code value ="J07CA09"/>
                        <display value ="Diphtherie-Haemophilus influenzae  B-Pertussis-Poliomyelitis-Tetanus-Hepatitis B"/>
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/ifa/pzn"/>
                        <code value ="10538539"/>
                        <display value ="Infanrix hexa®"/>
                    </coding>
                    <text value ="Infanrix hexa®"/>
                </vaccineCode>
                <patient>
                    <reference value ="urn:uuid:86ae5944-1282-421d-a842-212e5e313442"/>
                </patient>
                <occurrenceDateTime value ="2014-04-28"/>
                <primarySource value ="true"/>
                <manufacturer>
                    <display value ="GlaxoSmithKline GmbH &amp; Co. KG"/>
                </manufacturer>
                <lotNumber value ="SIG116453"/>
                <note> 
                    <text value ="Bei einer ungewöhnlichen Impfreaktion sollte die impfende ärztliche Person benachrichtigt werden. Die ärztlich tätige Person hat, wenn der Verdacht einer gesundheitlichen Schädigung besteht, die über das übliche Ausmaß einer Impfreaktion hinaus geht verpflichtet, den Verdacht dem zuständigen Gesundheitsamt namentlich zu melden (§ 6 Absatz 1 Nr 3 des lnfektionsschutzgesetzes • lfSG) Im Falle eines Impfschadens besteht unter den Voraussetzungen des § 60 Absatz 1 lfSG ein Anspruch auf Entschädigung in entsprechender Anwendung der Vorschriften des Bundesversorgungsgesetzes. Der Antrag ist bei der für die Durchführung des Bundesversorgungsgesetzes zuständigen Behörde (§ 64 Absatz 1 lfSG, i.d.R. 'Versorgungsamt') zu stellen. Weitere Auskünfte erteilt das zuständige Gesundheitsamt."/> 
                </note>
                <protocolApplied>
                    <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Follow_Up">
                    <valueDateTime value ="2014-06-04"/>
                    </extension>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="76902006"/>
                            <display value ="Tetanus (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Tetanus-Infektion"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="397430003"/>
                            <display value ="Diphtheria caused by Corynebacterium diphtheriae (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Diphtherie"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="27836007"/>
                            <display value ="Pertussis (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Pertussis"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="398102009"/>
                            <display value ="Acute poliomyelitis (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Poliomyelitis"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="709410003"/>
                            <display value ="Haemophilus influenzae type b infection (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Haemophilus-influenzae-Typ-B-Infektion"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="66071002"/>
                            <display value ="Viral hepatitis type B (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Hepatitis B"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <doseNumberString>
                        <extension url ="http://hl7.org/fhir/StructureDefinition/data-absent-reason">
                            <valueCode value ="unknown"/>
                        </extension>
                    </doseNumberString>
                </protocolApplied>
            </Immunization>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:86ae5944-1282-421d-a842-212e5e313442"/>
        <resource>
            <Patient>
                <id value="86ae5944-1282-421d-a842-212e5e313442" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Patient|1.1.0" />
                </meta>
                <identifier>
                    <type>
                        <coding>
                            <system value="http://fhir.de/CodeSystem/identifier-type-de-basis" />
                            <code value="GKV" />
                            <display value ="Gesetzliche Krankenversicherung"/>
                        </coding>
                    </type>
                    <system value="http://fhir.de/NamingSystem/gkv/kvid-10" />
                    <value value="B783522772" />
                </identifier>
                <name>
                <use value="official" />
                    <text value="Wiebke Metzger" />
                    <family value="Metzger">
                        <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                            <valueString value="Metzger" />
                        </extension>
                    </family>
                    <given value="Wiebke" />
                </name>
                <gender value="female" />
                <birthDate value="2014-02-17" />
            </Patient>
        </resource>
    </entry>
    <entry>
        <fullUrl value ="urn:uuid:3dd5b914-756c-487e-9b74-fcd36adf31db"/>
        <resource>
            <Practitioner>
                <id value="3dd5b914-756c-487e-9b74-fcd36adf31db" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitioner|1.1.0" />
                </meta>
                <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Additional_Comment">
                <valueString value="Behandelnder Arzt" />
                </extension>
                <identifier>
                <type>
                    <coding>
                    <system value="http://terminology.hl7.org/CodeSystem/v2-0203" />
                    <code value="LANR" />
                    </coding>
                </type>
                <system value="https://fhir.kbv.de/NamingSystem/KBV_NS_Base_ANR" />
                <value value="520886234" />
                </identifier>
                <name>
                <use value="official" />
                <family value="Schulz">
                    <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                    <valueString value="Schulz" />
                    </extension>
                </family>
                <given value="Edgar" />
                <prefix value="Dr.">
                    <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier">
                    <valueCode value="AC" />
                    </extension>
                </prefix>
                </name>
                <telecom>
                <system value="phone" />
                <value value="+49(0)9853111893" />
                </telecom>
            <qualification>
                <code>
                    <coding>
                    <system value="https://fhir.kbv.de/CodeSystem/KBV_CS_SFHIR_BAR2_WBO" />
                    <code value="341" />
                    <display value="FA Kinder- und Jugendmedizin"/>
                    </coding>
                </code>
                </qualification>
            </Practitioner>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:d17f1bec-4561-4b3f-8fbf-898b005018e2"/>
        <resource>
            <PractitionerRole>
                <id value="d17f1bec-4561-4b3f-8fbf-898b005018e2" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitionerrole|1.1.0" />
                </meta>
                <practitioner>
                    <reference value="urn:uuid:3dd5b914-756c-487e-9b74-fcd36adf31db" />
                </practitioner>
                <organization>
                    <reference value="urn:uuid:253ac82b-b892-4b11-ba14-4cb1a5433968" />
                </organization>
            </PractitionerRole>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:253ac82b-b892-4b11-ba14-4cb1a5433968"/>
        <resource>
            <Organization>
                <id value="253ac82b-b892-4b11-ba14-4cb1a5433968" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Organization|1.1.0" />
                </meta>
                <name value="Praxis Dr. Edgar Schulz" />
                <address>
                    <type value="both" />
                    <line value="Wladimir-Wiese-Straße 9/8">
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber">
                            <valueString value="9/8" />
                        </extension>
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName">
                            <valueString value="Wladimir-Wiese-Straße" />
                        </extension>
                    </line>
                    <city value="Viersen" />
                    <postalCode value="37220" />
                    <country value="D" />
                </address>
            </Organization>
        </resource>
    </entry>
</Bundle>",
        "<Bundle xmlns="http://hl7.org/fhir">
    <id value="bf7974ae-d143-4bbb-a7f0-fb0531b530ee" />
    <meta>
        <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Bundle_Entry|1.1.0" />
    </meta>
    <identifier>
        <system value="urn:ietf:rfc:3986"/>
        <value value="urn:uuid:bf7974ae-d143-4bbb-a7f0-fb0531b530ee"/>
    </identifier>
    <type value ="document"/>
    <timestamp value="2014-05-21T16:00:02Z"/>
    <entry>
        <fullUrl value="urn:uuid:a9b7d8de-81b4-425d-b7aa-b3d6fb5f1c54"/>
        <resource>
            <Composition>
                <id value="a9b7d8de-81b4-425d-b7aa-b3d6fb5f1c54" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Composition_Prime|1.1.0" />
                </meta>
                <text>
                    <status value ="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                        <h1>Composition</h1>
                    </div>
                </text>
                <status value ="final"/>
                <type>
                    <coding>
                        <system value="http://loinc.org" />
                        <code value="11369-6" />
                        <display value="History of Immunization Narrative"/>
                    </coding>
                </type>
                <subject>
                    <reference value ="urn:uuid:f3bdfb74-0c6e-48e5-ac9d-fcc231ae27a1"/>
                </subject>
                <date value="2014-05-21"/>
                <author>
                    <reference value="urn:uuid:be7a4ba2-3adc-4b0b-804b-d3e79aa97fa5"/>
                </author>
                <title value="Impfass"/>
                <section>
                    <code>
                        <coding>
                            <system value="http://snomed.info/sct" />
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value="713404003" />
                            <display value="Vaccination given (situation)"/>
                        </coding>
                    </code>
                    <entry>
                        <reference value ="urn:uuid:beb12985-33e2-4b1b-9179-2216d0dd352f"/>
                    </entry>
                </section>
            </Composition>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:beb12985-33e2-4b1b-9179-2216d0dd352f"/>
        <resource>
            <Immunization>
                <id value="beb12985-33e2-4b1b-9179-2216d0dd352f"/>
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Record_Prime|1.1.0"/>
                </meta>
                <text>
                    <status value="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                    <h1>Meningokokkenimpfstoff</h1>
                    </div>
                </text>
                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Entry_Type">
                    <valueCodeableConcept>
                        <coding>
                            <system value ="https://fhir.kbv.de/CodeSystem/KBV_CS_MIO_Vaccination_Technical_Entry_Type"/>
                            <code value ="Eduii"/>
                            <display value ="Eintrag digital und im Impfausweis"/>
                        </coding>
                    </valueCodeableConcept>
                </extension>
                <extension url = "https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Attester">
                    <extension url= "mode">
                        <valueCodeableConcept>
                            <coding>
                                <system value ="http://hl7.org/fhir/composition-attestation-mode"/>
                                <code value ="legal"/>
                            </coding>
                        </valueCodeableConcept>
                    </extension>
                    <extension url ="party">
                        <valueReference>
                            <reference value ="urn:uuid:be7a4ba2-3adc-4b0b-804b-d3e79aa97fa5"/>
                        </valueReference>
                    </extension>
                </extension>
                <status value="completed"/>
                <vaccineCode>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="836401009"/>
                        <display value ="Vaccine product containing Neisseria meningitidis antigen (medicinal product)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Meningokokkenimpfstoff"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/dimdi/atc"/>
                        <version value="atcgm2021" />
                        <code value ="J07AH"/>
                        <display value ="Meningokokken-Impfstoffe"/>
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/ifa/pzn"/>
                        <code value ="09461122"/>
                        <display value ="BEXSERO®"/>
                    </coding>
                    <text value ="BEXSERO®"/>
                </vaccineCode>
                <patient>
                    <reference value ="urn:uuid:f3bdfb74-0c6e-48e5-ac9d-fcc231ae27a1"/>
                </patient>
                <occurrenceDateTime value ="2014-05-21"/>
                <primarySource value ="true"/>
                <manufacturer>
                    <display value ="GlaxoSmithKline GmbH &amp; Co. KG"/>
                </manufacturer>
                <lotNumber value ="142069A"/>
                <note> 
                    <text value ="Bei einer ungewöhnlichen Impfreaktion sollte die impfende ärztliche Person benachrichtigt werden. Die ärztlich tätige Person hat, wenn der Verdacht einer gesundheitlichen Schädigung besteht, die über das übliche Ausmaß einer Impfreaktion hinaus geht verpflichtet, den Verdacht dem zuständigen Gesundheitsamt namentlich zu melden (§ 6 Absatz 1 Nr 3 des lnfektionsschutzgesetzes • lfSG) Im Falle eines Impfschadens besteht unter den Voraussetzungen des § 60 Absatz 1 lfSG ein Anspruch auf Entschädigung in entsprechender Anwendung der Vorschriften des Bundesversorgungsgesetzes. Der Antrag ist bei der für die Durchführung des Bundesversorgungsgesetzes zuständigen Behörde (§ 64 Absatz 1 lfSG, i.d.R. 'Versorgungsamt') zu stellen. Weitere Auskünfte erteilt das zuständige Gesundheitsamt."/> 
                </note>
                <protocolApplied>
                    <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Follow_Up">
                    <valueDateTime value ="2015-11-25"/>
                    </extension>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="23511006"/>
                            <display value ="Meningococcal infectious disease (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Meningokokken-Infektion"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <doseNumberString>
                        <extension url ="http://hl7.org/fhir/StructureDefinition/data-absent-reason">
                            <valueCode value ="unknown"/>
                        </extension>
                    </doseNumberString>
                </protocolApplied>
            </Immunization>
        </resource>
    </entry>
    <entry>
        <fullUrl value ="urn:uuid:f3bdfb74-0c6e-48e5-ac9d-fcc231ae27a1"/>
        <resource>
            <Patient>
                <id value="f3bdfb74-0c6e-48e5-ac9d-fcc231ae27a1" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Patient|1.1.0" />
                </meta>
                <identifier>
                    <type>
                        <coding>
                            <system value="http://fhir.de/CodeSystem/identifier-type-de-basis" />
                            <code value="GKV" />
                            <display value ="Gesetzliche Krankenversicherung"/>
                        </coding>
                    </type>
                    <system value="http://fhir.de/NamingSystem/gkv/kvid-10" />
                    <value value="B783522772" />
                </identifier>
                <name>
                <use value="official" />
                    <text value="Wiebke Metzger" />
                    <family value="Metzger">
                        <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                            <valueString value="Metzger" />
                        </extension>
                    </family>
                    <given value="Wiebke" />
                </name>
                <gender value="female" />
                <birthDate value="2014-02-17" />
            </Patient>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:24621ce5-7885-4b8c-b9d5-d438428fdb56"/>
        <resource>
            <Practitioner>
                <id value="24621ce5-7885-4b8c-b9d5-d438428fdb56" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitioner|1.1.0" />
                </meta>
                <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Additional_Comment">
                <valueString value="Behandelnder Arzt" />
                </extension>
                <identifier>
                <type>
                    <coding>
                    <system value="http://terminology.hl7.org/CodeSystem/v2-0203" />
                    <code value="LANR" />
                    </coding>
                </type>
                <system value="https://fhir.kbv.de/NamingSystem/KBV_NS_Base_ANR" />
                <value value="520886234" />
                </identifier>
                <name>
                <use value="official" />
                <family value="Schulz">
                    <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                    <valueString value="Schulz" />
                    </extension>
                </family>
                <given value="Edgar" />
                <prefix value="Dr.">
                    <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier">
                    <valueCode value="AC" />
                    </extension>
                </prefix>
                </name>
                <telecom>
                <system value="phone" />
                <value value="+49(0)9853111893" />
                </telecom>
            <qualification>
                <code>
                    <coding>
                    <system value="https://fhir.kbv.de/CodeSystem/KBV_CS_SFHIR_BAR2_WBO" />
                    <code value="341" />
                    <display value="FA Kinder- und Jugendmedizin"/>
                    </coding>
                </code>
                </qualification>
            </Practitioner>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:be7a4ba2-3adc-4b0b-804b-d3e79aa97fa5"/>
        <resource>
            <PractitionerRole>
                <id value="be7a4ba2-3adc-4b0b-804b-d3e79aa97fa5" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitionerrole|1.1.0" />
                </meta>
                <practitioner>
                    <reference value="urn:uuid:24621ce5-7885-4b8c-b9d5-d438428fdb56" />
                </practitioner>
                <organization>
                    <reference value="urn:uuid:3b0eff46-6bdf-40ea-abd9-e4fbfe979d87" />
                </organization>
            </PractitionerRole>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:3b0eff46-6bdf-40ea-abd9-e4fbfe979d87"/>
        <resource>
            <Organization>
                <id value="3b0eff46-6bdf-40ea-abd9-e4fbfe979d87" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Organization|1.1.0" />
                </meta>
                <name value="Praxis Dr. Edgar Schulz" />
                <address>
                    <type value="both" />
                    <line value="Wladimir-Wiese-Straße 9/8">
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber">
                            <valueString value="9/8" />
                        </extension>
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName">
                            <valueString value="Wladimir-Wiese-Straße" />
                        </extension>
                    </line>
                    <city value="Viersen" />
                    <postalCode value="37220" />
                    <country value="D" />
                </address>
            </Organization>
        </resource>
    </entry>
</Bundle>",
        "<Bundle xmlns="http://hl7.org/fhir">
    <id value="2a229174-b68b-4e60-bd6a-8f090c079262" />
    <meta>
        <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Bundle_Entry|1.1.0" />
    </meta>
    <identifier>
        <system value="urn:ietf:rfc:3986"/>
        <value value="urn:uuid:2a229174-b68b-4e60-bd6a-8f090c079262"/>
    </identifier>
    <type value ="document"/>
    <timestamp value="2014-06-04T16:00:02Z"/>
    <entry>
        <fullUrl value="urn:uuid:7c7aa591-8bfa-4b3b-b2cd-8a1d136239e4"/>
        <resource>
            <Composition>
                <id value="7c7aa591-8bfa-4b3b-b2cd-8a1d136239e4" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Composition_Prime|1.1.0" />
                </meta>
                <text>
                    <status value ="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                        <h1>Composition</h1>
                    </div>
                </text>
                <status value ="final"/>
                <type>
                    <coding>
                        <system value="http://loinc.org" />
                        <code value="11369-6" />
                        <display value="History of Immunization Narrative"/>
                    </coding>
                </type>
                <subject>
                    <reference value ="urn:uuid:540160ec-3ed9-4ab3-9a1f-2e26c2a6be1a"/>
                </subject>
                <date value="2014-06-04"/>
                <author>
                    <reference value="urn:uuid:506808c1-b862-4a5b-ba3c-032133b526f3"/>
                </author>
                <title value="Impfass"/>
                <section>
                    <code>
                        <coding>
                            <system value="http://snomed.info/sct" />
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value="713404003" />
                            <display value="Vaccination given (situation)"/>
                        </coding>
                    </code>
                    <entry>
                        <reference value ="urn:uuid:6e89bb63-cd3e-41fb-b790-8da4ca44269c"/>
                    </entry>
                    <entry>
                        <reference value ="urn:uuid:69ec71ed-019e-4011-8f8a-429f36307fa1"/>
                    </entry>
                </section>
            </Composition>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:6e89bb63-cd3e-41fb-b790-8da4ca44269c"/>
        <resource>
            <Immunization>
                <id value="6e89bb63-cd3e-41fb-b790-8da4ca44269c"/>
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Record_Prime|1.1.0"/>
                </meta>
                <text>
                    <status value="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                    <h1>Pneumokokken-Injektion</h1>
                    </div>
                </text>
                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Entry_Type">
                    <valueCodeableConcept>
                        <coding>
                            <system value ="https://fhir.kbv.de/CodeSystem/KBV_CS_MIO_Vaccination_Technical_Entry_Type"/>
                            <code value ="Eduii"/>
                            <display value ="Eintrag digital und im Impfausweis"/>
                        </coding>
                    </valueCodeableConcept>
                </extension>
                <extension url = "https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Attester">
                    <extension url= "mode">
                        <valueCodeableConcept>
                            <coding>
                                <system value ="http://hl7.org/fhir/composition-attestation-mode"/>
                                <code value ="legal"/>
                            </coding>
                        </valueCodeableConcept>
                    </extension>
                    <extension url ="party">
                        <valueReference>
                            <reference value ="urn:uuid:506808c1-b862-4a5b-ba3c-032133b526f3"/>
                        </valueReference>
                    </extension>
                </extension>
                <status value="completed"/>
                <vaccineCode>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="836398006"/>
                        <display value ="Vaccine product containing Streptococcus pneumoniae antigen (medicinal product)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Pneumokokkenimpfstoff"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/dimdi/atc"/>
                        <version value="atcgm2021" />
                        <code value ="J07AL"/>
                        <display value ="Pneumokokken-Impfstoffe"/>
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/ifa/pzn"/>
                        <code value ="05496276"/>
                        <display value ="Prevenar 13®"/>
                    </coding>
                    <text value ="Prevenar 13®"/>
                </vaccineCode>
                <patient>
                    <reference value ="urn:uuid:540160ec-3ed9-4ab3-9a1f-2e26c2a6be1a"/>
                </patient>
                <occurrenceDateTime value ="2016-06-04"/>
                <primarySource value ="true"/>
                <manufacturer>
                    <display value ="Pfizer Pharma GmbH"/>
                </manufacturer>
                <lotNumber value ="H04492"/>
                <note> 
                    <text value ="Bei einer ungewöhnlichen Impfreaktion sollte die impfende ärztliche Person benachrichtigt werden. Die ärztlich tätige Person hat, wenn der Verdacht einer gesundheitlichen Schädigung besteht, die über das übliche Ausmaß einer Impfreaktion hinaus geht verpflichtet, den Verdacht dem zuständigen Gesundheitsamt namentlich zu melden (§ 6 Absatz 1 Nr 3 des lnfektionsschutzgesetzes • lfSG) Im Falle eines Impfschadens besteht unter den Voraussetzungen des § 60 Absatz 1 lfSG ein Anspruch auf Entschädigung in entsprechender Anwendung der Vorschriften des Bundesversorgungsgesetzes. Der Antrag ist bei der für die Durchführung des Bundesversorgungsgesetzes zuständigen Behörde (§ 64 Absatz 1 lfSG, i.d.R. 'Versorgungsamt') zu stellen. Weitere Auskünfte erteilt das zuständige Gesundheitsamt."/> 
                </note>
                <protocolApplied>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="16814004"/>
                            <display value ="Pneumococcal infectious disease (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Pneumokokken-Infektion"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <doseNumberString>
                        <extension url ="http://hl7.org/fhir/StructureDefinition/data-absent-reason">
                            <valueCode value ="unknown"/>
                        </extension>
                    </doseNumberString>
                </protocolApplied>
            </Immunization>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:69ec71ed-019e-4011-8f8a-429f36307fa1"/>
        <resource>
            <Immunization>
                <id value="69ec71ed-019e-4011-8f8a-429f36307fa1"/>
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Record_Prime|1.1.0"/>
                </meta>
                <text>
                    <status value="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                    <h1>Tetanus,Diphterie, Pertussis, Poliomyelitis,Haemophilus influenzae b, Hepatitis B</h1>
                    </div>
                </text>
                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Entry_Type">
                    <valueCodeableConcept>
                        <coding>
                            <system value ="https://fhir.kbv.de/CodeSystem/KBV_CS_MIO_Vaccination_Technical_Entry_Type"/>
                            <code value ="Eduii"/>
                            <display value ="Eintrag digital und im Impfausweis"/>
                        </coding>
                    </valueCodeableConcept>
                </extension>
                <extension url = "https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Attester">
                    <extension url= "mode">
                        <valueCodeableConcept>
                            <coding>
                                <system value ="http://hl7.org/fhir/composition-attestation-mode"/>
                                <code value ="legal"/>
                            </coding>
                        </valueCodeableConcept>
                    </extension>
                    <extension url ="party">
                        <valueReference>
                            <reference value ="urn:uuid:506808c1-b862-4a5b-ba3c-032133b526f3"/>
                        </valueReference>
                    </extension>
                </extension>
                <status value="completed"/>
                <vaccineCode>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="871895005"/>
                        <display value ="Vaccine product containing only Bordetella pertussis and Clostridium tetani and Corynebacterium diphtheriae and Haemophilus influenzae type B and Hepatitis B virus and Human poliovirus antigens (medicinal product)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Diphtherie-Haemophilus influenzae B-Pertussis, Poliomyelitis, Tetanus, Hepatitis B-Impfstoff"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/dimdi/atc"/>
                        <version value="atcgm2021" />
                        <code value ="J07CA09"/>
                        <display value ="Diphtherie-Haemophilus influenzae  B-Pertussis-Poliomyelitis-Tetanus-Hepatitis B"/>
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/ifa/pzn"/>
                        <code value ="10538539"/>
                        <display value ="Infanrix hexa®"/>
                    </coding>
                    <text value ="Infanrix hexa®"/>
                </vaccineCode>
                <patient>
                    <reference value ="urn:uuid:540160ec-3ed9-4ab3-9a1f-2e26c2a6be1a"/>
                </patient>
                <occurrenceDateTime value ="2014-06-04"/>
                <primarySource value ="true"/>
                <manufacturer>
                    <display value ="GlaxoSmithKline GmbH &amp; Co. KG"/>
                </manufacturer>
                <lotNumber value ="SIG116453"/>
                <note> 
                    <text value ="Bei einer ungewöhnlichen Impfreaktion sollte die impfende ärztliche Person benachrichtigt werden. Die ärztlich tätige Person hat, wenn der Verdacht einer gesundheitlichen Schädigung besteht, die über das übliche Ausmaß einer Impfreaktion hinaus geht verpflichtet, den Verdacht dem zuständigen Gesundheitsamt namentlich zu melden (§ 6 Absatz 1 Nr 3 des lnfektionsschutzgesetzes • lfSG) Im Falle eines Impfschadens besteht unter den Voraussetzungen des § 60 Absatz 1 lfSG ein Anspruch auf Entschädigung in entsprechender Anwendung der Vorschriften des Bundesversorgungsgesetzes. Der Antrag ist bei der für die Durchführung des Bundesversorgungsgesetzes zuständigen Behörde (§ 64 Absatz 1 lfSG, i.d.R. 'Versorgungsamt') zu stellen. Weitere Auskünfte erteilt das zuständige Gesundheitsamt."/> 
                </note>
                <protocolApplied>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="76902006"/>
                            <display value ="Tetanus (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Tetanus-Infektion"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="397430003"/>
                            <display value ="Diphtheria caused by Corynebacterium diphtheriae (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Diphtherie"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="27836007"/>
                            <display value ="Pertussis (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Pertussis"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="398102009"/>
                            <display value ="Acute poliomyelitis (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Poliomyelitis"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="709410003"/>
                            <display value ="Haemophilus influenzae type b infection (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Haemophilus-influenzae-Typ-B-Infektion"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="66071002"/>
                            <display value ="Viral hepatitis type B (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Hepatitis B"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <doseNumberString>
                        <extension url ="http://hl7.org/fhir/StructureDefinition/data-absent-reason">
                            <valueCode value ="unknown"/>
                        </extension>
                    </doseNumberString>
                </protocolApplied>
            </Immunization>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:69e0c4a1-0d36-4084-a7a9-2eefc8153535"/>
        <resource>
            <Organization>
                <id value="69e0c4a1-0d36-4084-a7a9-2eefc8153535" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Organization|1.1.0" />
                </meta>
                <name value="Praxis Dr. Edgar Schulz" />
                <address>
                    <type value="both" />
                    <line value="Wladimir-Wiese-Straße 9/8">
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber">
                            <valueString value="9/8" />
                        </extension>
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName">
                            <valueString value="Wladimir-Wiese-Straße" />
                        </extension>
                    </line>
                    <city value="Viersen" />
                    <postalCode value="37220" />
                    <country value="D" />
                </address>
            </Organization>
        </resource> 
    </entry>
    <entry>
        <fullUrl value="urn:uuid:540160ec-3ed9-4ab3-9a1f-2e26c2a6be1a"/>
        <resource>
           <Patient>
                <id value="540160ec-3ed9-4ab3-9a1f-2e26c2a6be1a" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Patient|1.1.0" />
                </meta>
                <identifier>
                    <type>
                        <coding>
                            <system value="http://fhir.de/CodeSystem/identifier-type-de-basis" />
                            <code value="GKV" />
                            <display value ="Gesetzliche Krankenversicherung"/>
                        </coding>
                    </type>
                    <system value="http://fhir.de/NamingSystem/gkv/kvid-10" />
                    <value value="B783522772" />
                </identifier>
                <name>
                <use value="official" />
                    <text value="Wiebke Metzger" />
                    <family value="Metzger">
                        <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                            <valueString value="Metzger" />
                        </extension>
                    </family>
                    <given value="Wiebke" />
                </name>
                <gender value="female" />
                <birthDate value="2014-02-17" />
            </Patient> 
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:3e48d864-38b3-406c-9880-872c2a9e08c7"/>
        <resource>
            <Practitioner>
                <id value="3e48d864-38b3-406c-9880-872c2a9e08c7" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitioner|1.1.0" />
                </meta>
                <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Additional_Comment">
                <valueString value="Behandelnder Arzt" />
                </extension>
                <identifier>
                <type>
                    <coding>
                    <system value="http://terminology.hl7.org/CodeSystem/v2-0203" />
                    <code value="LANR" />
                    </coding>
                </type>
                <system value="https://fhir.kbv.de/NamingSystem/KBV_NS_Base_ANR" />
                <value value="520886234" />
                </identifier>
                <name>
                <use value="official" />
                <family value="Schulz">
                    <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                    <valueString value="Schulz" />
                    </extension>
                </family>
                <given value="Edgar" />
                <prefix value="Dr.">
                    <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier">
                    <valueCode value="AC" />
                    </extension>
                </prefix>
                </name>
                <telecom>
                <system value="phone" />
                <value value="+49(0)9853111893" />
                </telecom>
            <qualification>
                <code>
                    <coding>
                    <system value="https://fhir.kbv.de/CodeSystem/KBV_CS_SFHIR_BAR2_WBO" />
                    <code value="341" />
                    <display value="FA Kinder- und Jugendmedizin"/>
                    </coding>
                </code>
                </qualification>
            </Practitioner>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:506808c1-b862-4a5b-ba3c-032133b526f3"/>
        <resource>
            <PractitionerRole>
                <id value="506808c1-b862-4a5b-ba3c-032133b526f3" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitionerrole|1.1.0" />
                </meta>
                <practitioner>
                    <reference value="urn:uuid:3e48d864-38b3-406c-9880-872c2a9e08c7" />
                </practitioner>
                <organization>
                    <reference value="urn:uuid:69e0c4a1-0d36-4084-a7a9-2eefc8153535" />
                </organization>
            </PractitionerRole>
        </resource>
    </entry>
</Bundle>",
        "<Bundle xmlns="http://hl7.org/fhir">
    <id value="0f62e600-692d-43c0-989e-cdd920ee0046" />
    <meta>
        <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Bundle_Entry|1.1.0" />
    </meta>
    <identifier>
        <system value="urn:ietf:rfc:3986"/>
        <value value="urn:uuid:0f62e600-692d-43c0-989e-cdd920ee0046"/>
    </identifier>
    <type value ="document"/>
    <timestamp value="2015-12-17T16:00:02Z"/>
    <entry>
        <fullUrl value="urn:uuid:0599161d-23ae-491d-b5bf-5f1f677eafae"/>
        <resource>
            <Composition>
                <id value="0599161d-23ae-491d-b5bf-5f1f677eafae" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Composition_Prime|1.1.0" />
                </meta>
                <text>
                    <status value ="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                        <h1>Composition</h1>
                    </div>
                </text>
                <status value ="final"/>
                <type>
                    <coding>
                        <system value="http://loinc.org" />
                        <code value="11369-6" />
                        <display value="History of Immunization Narrative"/>
                    </coding>
                </type>
                <subject>
                    <reference value ="urn:uuid:2110a57a-fcfb-47c7-9ce5-0ea4b3e16a1e"/>
                </subject>
                <date value="2015-12-17"/>
                <author>
                    <reference value="urn:uuid:bee8bc98-879f-413a-8980-0d186d85a86c"/>
                </author>
                <title value="Impfass"/>
                <section>
                    <code>
                        <coding>
                            <system value="http://snomed.info/sct" />
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value="713404003" />
                            <display value="Vaccination given (situation)"/>
                        </coding>
                    </code>
                    <entry>
                        <reference value ="urn:uuid:d66e43c0-2be4-4d60-b607-58d2c44fcd00"/>
                    </entry>
                    <entry>
                        <reference value ="urn:uuid:c102e3d5-5129-48fb-9625-fabef6fc7b64"/>
                    </entry>
                </section>
            </Composition>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:c102e3d5-5129-48fb-9625-fabef6fc7b64"/>
        <resource>
            <Immunization>
                <id value="c102e3d5-5129-48fb-9625-fabef6fc7b64"/>
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Record_Prime|1.1.0"/>
                </meta>
                <text>
                    <status value="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                    <h1>MMR-Injektion</h1>
                    </div>
                </text>
                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Entry_Type">
                    <valueCodeableConcept>
                        <coding>
                            <system value ="https://fhir.kbv.de/CodeSystem/KBV_CS_MIO_Vaccination_Technical_Entry_Type"/>
                            <code value ="Eduii"/>
                            <display value ="Eintrag digital und im Impfausweis"/>
                        </coding>
                    </valueCodeableConcept>
                </extension>
                <extension url = "https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Attester">
                    <extension url= "mode">
                        <valueCodeableConcept>
                            <coding>
                                <system value ="http://hl7.org/fhir/composition-attestation-mode"/>
                                <code value ="legal"/>
                            </coding>
                        </valueCodeableConcept>
                    </extension>
                    <extension url ="party">
                        <valueReference>
                            <reference value ="urn:uuid:bee8bc98-879f-413a-8980-0d186d85a86c"/>
                        </valueReference>
                    </extension>
                </extension>
                <status value="completed"/>
                <vaccineCode>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="871831003"/>
                        <display value ="Vaccine product containing only Measles morbillivirus and Mumps orthorubulavirus and Rubella virus antigens (medicinal product)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Masern, Mumps, Röteln (MMR) - Impfstoff"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/dimdi/atc"/>
                        <version value="atcgm2021" />
                        <code value ="J07BD52"/>
                        <display value ="Masern, Kombinationen mit Mumps und Röteln, lebend abgeschwächt"/>
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/ifa/pzn"/>
                        <code value ="08627744"/>
                        <display value ="Priorix®"/>
                    </coding>
                    <text value ="Priorix®"/>
                </vaccineCode>
                <patient>
                    <reference value ="urn:uuid:2110a57a-fcfb-47c7-9ce5-0ea4b3e16a1e"/>
                </patient>
                <occurrenceDateTime value ="2014-12-17"/>
                <primarySource value ="true"/>
                <manufacturer>
                    <display value ="GlaxoSmithKline GmbH &amp; Co. KG"/>
                </manufacturer>
                <lotNumber value ="WU5Y5L4AS"/>
                <note> 
                    <text value ="Bei einer ungewöhnlichen Impfreaktion sollte die impfende ärztliche Person benachrichtigt werden. Die ärztlich tätige Person hat, wenn der Verdacht einer gesundheitlichen Schädigung besteht, die über das übliche Ausmaß einer Impfreaktion hinaus geht verpflichtet, den Verdacht dem zuständigen Gesundheitsamt namentlich zu melden (§ 6 Absatz 1 Nr 3 des lnfektionsschutzgesetzes • lfSG) Im Falle eines Impfschadens besteht unter den Voraussetzungen des § 60 Absatz 1 lfSG ein Anspruch auf Entschädigung in entsprechender Anwendung der Vorschriften des Bundesversorgungsgesetzes. Der Antrag ist bei der für die Durchführung des Bundesversorgungsgesetzes zuständigen Behörde (§ 64 Absatz 1 lfSG, i.d.R. 'Versorgungsamt') zu stellen. Weitere Auskünfte erteilt das zuständige Gesundheitsamt."/> 
                </note>
                <protocolApplied>
                    <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Follow_Up">
                    <valueDateTime value ="2015-02-05"/>
                    </extension>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="36989005"/>
                            <display value ="Mumps (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Mumps"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="14189004"/>
                            <display value ="Measles (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Masern"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="36653000"/>
                            <display value ="Rubella (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Röteln"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <doseNumberString>
                        <extension url ="http://hl7.org/fhir/StructureDefinition/data-absent-reason">
                            <valueCode value ="unknown"/>
                        </extension>
                    </doseNumberString>
                </protocolApplied>
            </Immunization>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:d66e43c0-2be4-4d60-b607-58d2c44fcd00"/>
        <resource>
            <Immunization>
                <id value="d66e43c0-2be4-4d60-b607-58d2c44fcd00"/>
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Record_Prime|1.1.0"/>
                </meta>
                <text>
                    <status value="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                    <h1>Varizellen</h1>
                    </div>
                </text>
                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Entry_Type">
                    <valueCodeableConcept>
                        <coding>
                            <system value ="https://fhir.kbv.de/CodeSystem/KBV_CS_MIO_Vaccination_Technical_Entry_Type"/>
                            <code value ="Eduii"/>
                            <display value ="Eintrag digital und im Impfausweis"/>
                        </coding>
                    </valueCodeableConcept>
                </extension>
                <extension url = "https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Attester">
                    <extension url= "mode">
                        <valueCodeableConcept>
                            <coding>
                                <system value ="http://hl7.org/fhir/composition-attestation-mode"/>
                                <code value ="legal"/>
                            </coding>
                        </valueCodeableConcept>
                    </extension>
                    <extension url ="party">
                        <valueReference>
                            <reference value ="urn:uuid:bee8bc98-879f-413a-8980-0d186d85a86c"/>
                        </valueReference>
                    </extension>
                </extension>
                <status value="completed"/>
                <vaccineCode>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="221000221107"/>
                        <display value ="Vaccine product containing only live attenuated Human alphaherpesvirus 3 antigen (medicinal product)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Varizellen-Impfstoff"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/dimdi/atc"/>
                        <version value="atcgm2021" />
                        <code value ="J07BK01"/>
                        <display value ="Varicella, lebend abgeschwächt"/>
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/ifa/pzn"/>
                        <code value ="03709242"/>
                        <display value ="VARILRIX®"/>
                    </coding>
                    <text value ="VARILRIX®"/>
                </vaccineCode>
                <patient>
                    <reference value ="urn:uuid:2110a57a-fcfb-47c7-9ce5-0ea4b3e16a1e"/>
                </patient>
                <occurrenceDateTime value ="2014-12-17"/>
                <primarySource value ="true"/>
                <manufacturer>
                    <display value ="GlaxoSmithKline GmbH &amp; Co. KG"/>
                </manufacturer>
                <lotNumber value ="NNKRBC1C7"/>
                <note> 
                    <text value ="Bei einer ungewöhnlichen Impfreaktion sollte die impfende ärztliche Person benachrichtigt werden. Die ärztlich tätige Person hat, wenn der Verdacht einer gesundheitlichen Schädigung besteht, die über das übliche Ausmaß einer Impfreaktion hinaus geht verpflichtet, den Verdacht dem zuständigen Gesundheitsamt namentlich zu melden (§ 6 Absatz 1 Nr 3 des lnfektionsschutzgesetzes • lfSG) Im Falle eines Impfschadens besteht unter den Voraussetzungen des § 60 Absatz 1 lfSG ein Anspruch auf Entschädigung in entsprechender Anwendung der Vorschriften des Bundesversorgungsgesetzes. Der Antrag ist bei der für die Durchführung des Bundesversorgungsgesetzes zuständigen Behörde (§ 64 Absatz 1 lfSG, i.d.R. 'Versorgungsamt') zu stellen. Weitere Auskünfte erteilt das zuständige Gesundheitsamt."/> 
                </note>
                <protocolApplied>
                    <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Follow_Up">
                    <valueDateTime value ="2015-02-05"/>
                    </extension>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="38907003"/>
                            <display value ="Varicella (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Windpocken"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <doseNumberString>
                        <extension url ="http://hl7.org/fhir/StructureDefinition/data-absent-reason">
                            <valueCode value ="unknown"/>
                        </extension>
                    </doseNumberString>
                </protocolApplied>
            </Immunization>
        </resource>
    </entry>
    <entry>
        <fullUrl value ="urn:uuid:273c2b20-a42a-4cdd-bb4b-da97972492d5"/>
        <resource>
            <Organization>
                <id value="273c2b20-a42a-4cdd-bb4b-da97972492d5" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Organization|1.1.0" />
                </meta>
                <name value="Praxis Dr. Edgar Schulz" />
                <address>
                    <type value="both" />
                    <line value="Wladimir-Wiese-Straße 9/8">
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber">
                            <valueString value="9/8" />
                        </extension>
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName">
                            <valueString value="Wladimir-Wiese-Straße" />
                        </extension>
                    </line>
                    <city value="Viersen" />
                    <postalCode value="37220" />
                    <country value="D" />
                </address>
            </Organization>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:2110a57a-fcfb-47c7-9ce5-0ea4b3e16a1e"/>
        <resource>
            <Patient>
                <id value="2110a57a-fcfb-47c7-9ce5-0ea4b3e16a1e" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Patient|1.1.0" />
                </meta>
                <identifier>
                    <type>
                        <coding>
                            <system value="http://fhir.de/CodeSystem/identifier-type-de-basis" />
                            <code value="GKV" />
                            <display value ="Gesetzliche Krankenversicherung"/>
                        </coding>
                    </type>
                    <system value="http://fhir.de/NamingSystem/gkv/kvid-10" />
                    <value value="B783522772" />
                </identifier>
                <name>
                <use value="official" />
                    <text value="Wiebke Metzger" />
                    <family value="Metzger">
                        <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                            <valueString value="Metzger" />
                        </extension>
                    </family>
                    <given value="Wiebke" />
                </name>
                <gender value="female" />
                <birthDate value="2014-02-17" />
            </Patient>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:27ce131a-fe90-491f-ab5c-5aec8ed75496"/>
        <resource>
            <Practitioner>
                <id value="27ce131a-fe90-491f-ab5c-5aec8ed75496" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitioner|1.1.0" />
                </meta>
                <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Additional_Comment">
                <valueString value="Behandelnder Arzt" />
                </extension>
                <identifier>
                <type>
                    <coding>
                    <system value="http://terminology.hl7.org/CodeSystem/v2-0203" />
                    <code value="LANR" />
                    </coding>
                </type>
                <system value="https://fhir.kbv.de/NamingSystem/KBV_NS_Base_ANR" />
                <value value="520886234" />
                </identifier>
                <name>
                <use value="official" />
                <family value="Schulz">
                    <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                    <valueString value="Schulz" />
                    </extension>
                </family>
                <given value="Edgar" />
                <prefix value="Dr.">
                    <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier">
                    <valueCode value="AC" />
                    </extension>
                </prefix>
                </name>
                <telecom>
                <system value="phone" />
                <value value="+49(0)9853111893" />
                </telecom>
            <qualification>
                <code>
                    <coding>
                    <system value="https://fhir.kbv.de/CodeSystem/KBV_CS_SFHIR_BAR2_WBO" />
                    <code value="341" />
                    <display value="FA Kinder- und Jugendmedizin"/>
                    </coding>
                </code>
                </qualification>
            </Practitioner>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:bee8bc98-879f-413a-8980-0d186d85a86c"/>
        <resource>
            <PractitionerRole>
                <id value="bee8bc98-879f-413a-8980-0d186d85a86c" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitionerrole|1.1.0" />
                </meta>
                <practitioner>
                    <reference value="urn:uuid:27ce131a-fe90-491f-ab5c-5aec8ed75496" />
                </practitioner>
                <organization>
                    <reference value="urn:uuid:273c2b20-a42a-4cdd-bb4b-da97972492d5" />
                </organization>
            </PractitionerRole>
            </resource>
        </entry>
        <entry>
            <fullUrl value="urn:uuid:53fd0874-7241-4780-8c5e-b082422210cd"/>
            <resource>
            <Condition>
                <id value="53fd0874-7241-4780-8c5e-b082422210cd" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Condition|1.1.0" />
                </meta>
                <clinicalStatus>
                    <coding>
                        <system value ="http://terminology.hl7.org/CodeSystem/condition-clinical"/>
                        <code value ="resolved"/>
                        <display value ="Resolved"/>
                    </coding>
                </clinicalStatus>
                <verificationStatus>
                    <coding>
                        <system value ="http://terminology.hl7.org/CodeSystem/condition-ver-status"/>
                        <code value ="confirmed"/>
                        <display value ="Confirmed"/>
                    </coding>
                </verificationStatus>
                <code>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="14189004"/>
                        <display value ="Measles (disorder)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Masern"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                </code>
                <subject>
                    <reference value ="urn:uuid:2110a57a-fcfb-47c7-9ce5-0ea4b3e16a1e"/>
                </subject>
                <recordedDate value="2014-08-17"/>
                <recorder>
                    <reference value ="urn:uuid:bee8bc98-879f-413a-8980-0d186d85a86c"/>
                </recorder>
            </Condition>
            </resource>
        </entry>
        <entry>
            <fullUrl value="urn:uuid:77b9fc0e-6f0a-4bf2-8bc4-efda99ec7c6b"/>
            <resource>
            <Provenance xmlns="http://hl7.org/fhir">
                <id value="77b9fc0e-6f0a-4bf2-8bc4-efda99ec7c6b" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Provenance|1.1.0" />
                </meta>
                <target>
                    <reference value="urn:uuid:53fd0874-7241-4780-8c5e-b082422210cd"/>
                </target>
                <recorded value="2015-12-17T16:00:02Z"/>
                <agent>
                    <role>
                        <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="116154003"/>
                        <display value ="patient (person)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Patient"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                    </role>
                    <who>
                        <extension url ="http://hl7.org/fhir/StructureDefinition/data-absent-reason">
                            <valueCode value ="unknown"/>
                        </extension>
                        <display value ="unknown"/>
                    </who>
                </agent>
            </Provenance>
            </resource>
        </entry>
</Bundle>",
        "<Bundle xmlns="http://hl7.org/fhir">
    <id value="61380ff8-2fd9-4f37-9cea-ec0716e75f2b" />
    <meta>
        <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Bundle_Entry|1.1.0" />
    </meta>
    <identifier>
        <system value="urn:ietf:rfc:3986"/>
        <value value="urn:uuid:61380ff8-2fd9-4f37-9cea-ec0716e75f2b"/>
    </identifier>
    <type value ="document"/>
    <timestamp value="2015-02-05T16:00:02Z"/>
    <entry>
        <fullUrl value ="urn:uuid:a4c3fa6b-13ed-45d1-8119-03d46bdc900e"/>
        <resource>
            <Composition>
                <id value="a4c3fa6b-13ed-45d1-8119-03d46bdc900e" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Composition_Prime|1.1.0" />
                </meta>
                <text>
                    <status value ="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                        <h1>Composition</h1>
                    </div>
                </text>
                <status value ="final"/>
                <type>
                    <coding>
                        <system value="http://loinc.org" />
                        <code value="11369-6" />
                        <display value="History of Immunization Narrative"/>
                    </coding>
                </type>
                <subject>
                    <reference value ="urn:uuid:8c33e67f-079c-4af6-8fd4-b86f9df89993"/>
                </subject>
                <date value="2015-02-05"/>
                <author>
                    <reference value="urn:uuid:0576a59b-9fdb-40f8-9cc1-ea12949b4946"/>
                </author>
                <title value="Impfass"/>
                <section>
                    <code>
                        <coding>
                            <system value="http://snomed.info/sct" />
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value="713404003" />
                            <display value="Vaccination given (situation)"/>
                        </coding>
                    </code>
                    <entry>
                        <reference value ="urn:uuid:cc7b899f-747e-433a-b6e3-f207ad52eda5"/>
                    </entry>
                </section>
            </Composition>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:6afd91f8-88e9-41e3-80c7-000ad6cea991"/>
        <resource>
            <Organization>
                <id value="6afd91f8-88e9-41e3-80c7-000ad6cea991" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Organization|1.1.0" />
                </meta>
                <name value="Praxis Dr. Edgar Schulz" />
                <address>
                    <type value="both" />
                    <line value="Wladimir-Wiese-Straße 9/8">
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber">
                            <valueString value="9/8" />
                        </extension>
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName">
                            <valueString value="Wladimir-Wiese-Straße" />
                        </extension>
                    </line>
                    <city value="Viersen" />
                    <postalCode value="37220" />
                    <country value="D" />
                </address>
            </Organization>
        </resource>
    </entry>
    <entry>
        <fullUrl value ="urn:uuid:cc7b899f-747e-433a-b6e3-f207ad52eda5"/>
        <resource>
            <Immunization>
                <id value="cc7b899f-747e-433a-b6e3-f207ad52eda5"/>
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Record_Prime|1.1.0"/>
                </meta>
                <text>
                    <status value="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                    <h1>MMR-Varizellen-Injektion</h1>
                    </div>
                </text>
                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Entry_Type">
                    <valueCodeableConcept>
                        <coding>
                            <system value ="https://fhir.kbv.de/CodeSystem/KBV_CS_MIO_Vaccination_Technical_Entry_Type"/>
                            <code value ="Eduii"/>
                            <display value ="Eintrag digital und im Impfausweis"/>
                        </coding>
                    </valueCodeableConcept>
                </extension>
                <extension url = "https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Attester">
                    <extension url= "mode">
                        <valueCodeableConcept>
                            <coding>
                                <system value ="http://hl7.org/fhir/composition-attestation-mode"/>
                                <code value ="legal"/>
                            </coding>
                        </valueCodeableConcept>
                    </extension>
                    <extension url ="party">
                        <valueReference>
                            <reference value ="urn:uuid:0576a59b-9fdb-40f8-9cc1-ea12949b4946"/>
                        </valueReference>
                    </extension>
                </extension>
                <status value="completed"/>
                <vaccineCode>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="871908002"/>
                        <display value ="Vaccine product containing only Human alphaherpesvirus 3 and Measles morbillivirus and Mumps orthorubulavirus and Rubella virus antigens (medicinal product)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Masern, Mumps, Röteln, Varicella-Impfstoff"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/dimdi/atc"/>
                        <version value="atcgm2021" />
                        <code value ="J07BD54"/>
                        <display value ="Masern, Kombinationen mit Mumps, Röteln und Varicella,  lebend abgeschwächt"/>
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/ifa/pzn"/>
                        <code value ="03754567"/>
                        <display value ="Priorix-Tetra®"/>
                    </coding>
                    <text value ="Priorix-Tetra®"/>
                </vaccineCode>
                <patient>
                    <reference value ="urn:uuid:8c33e67f-079c-4af6-8fd4-b86f9df89993"/>
                </patient>
                <occurrenceDateTime value ="2015-02-05"/>
                <primarySource value ="true"/>
                <manufacturer>
                    <display value ="GlaxoSmithKline GmbH &amp; Co. KG"/>
                </manufacturer>
                <lotNumber value ="6QAX3EIBE"/>
                <note> 
                    <text value ="Bei einer ungewöhnlichen Impfreaktion sollte die impfende ärztliche Person benachrichtigt werden. Die ärztlich tätige Person hat, wenn der Verdacht einer gesundheitlichen Schädigung besteht, die über das übliche Ausmaß einer Impfreaktion hinaus geht verpflichtet, den Verdacht dem zuständigen Gesundheitsamt namentlich zu melden (§ 6 Absatz 1 Nr 3 des lnfektionsschutzgesetzes • lfSG) Im Falle eines Impfschadens besteht unter den Voraussetzungen des § 60 Absatz 1 lfSG ein Anspruch auf Entschädigung in entsprechender Anwendung der Vorschriften des Bundesversorgungsgesetzes. Der Antrag ist bei der für die Durchführung des Bundesversorgungsgesetzes zuständigen Behörde (§ 64 Absatz 1 lfSG, i.d.R. 'Versorgungsamt') zu stellen. Weitere Auskünfte erteilt das zuständige Gesundheitsamt."/> 
                </note>
                <protocolApplied>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="36989005"/>
                            <display value ="Mumps (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Mumps"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="14189004"/>
                            <display value ="Measles (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Masern"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="36653000"/>
                            <display value ="Rubella (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Röteln"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="38907003"/>
                            <display value ="Varicella (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Windpocken"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <doseNumberString>
                        <extension url ="http://hl7.org/fhir/StructureDefinition/data-absent-reason">
                            <valueCode value ="unknown"/>
                        </extension>
                    </doseNumberString>
                </protocolApplied>
            </Immunization>
        </resource>
    </entry>
    <entry>
        <fullUrl value ="urn:uuid:8c33e67f-079c-4af6-8fd4-b86f9df89993"/>
        <resource>
            <Patient>
                <id value="8c33e67f-079c-4af6-8fd4-b86f9df89993" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Patient|1.1.0" />
                </meta>
                <identifier>
                    <type>
                        <coding>
                            <system value="http://fhir.de/CodeSystem/identifier-type-de-basis" />
                            <code value="GKV" />
                            <display value ="Gesetzliche Krankenversicherung"/>
                        </coding>
                    </type>
                    <system value="http://fhir.de/NamingSystem/gkv/kvid-10" />
                    <value value="B783522772" />
                </identifier>
                <name>
                <use value="official" />
                    <text value="Wiebke Metzger" />
                    <family value="Metzger">
                        <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                            <valueString value="Metzger" />
                        </extension>
                    </family>
                    <given value="Wiebke" />
                </name>
                <gender value="female" />
                <birthDate value="2014-02-17" />
            </Patient>
        </resource>
    </entry>
    <entry>
        <fullUrl value ="urn:uuid:aa529572-b921-42ce-b53d-7ae21cbbafa3"/>
        <resource>
            <Practitioner>
                <id value="aa529572-b921-42ce-b53d-7ae21cbbafa3" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitioner|1.1.0" />
                </meta>
                <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Additional_Comment">
                <valueString value="Behandelnder Arzt" />
                </extension>
                <identifier>
                <type>
                    <coding>
                    <system value="http://terminology.hl7.org/CodeSystem/v2-0203" />
                    <code value="LANR" />
                    </coding>
                </type>
                <system value="https://fhir.kbv.de/NamingSystem/KBV_NS_Base_ANR" />
                <value value="520886234" />
                </identifier>
                <name>
                <use value="official" />
                <family value="Schulz">
                    <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                    <valueString value="Schulz" />
                    </extension>
                </family>
                <given value="Edgar" />
                <prefix value="Dr.">
                    <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier">
                    <valueCode value="AC" />
                    </extension>
                </prefix>
                </name>
                <telecom>
                <system value="phone" />
                <value value="+49(0)9853111893" />
                </telecom>
            <qualification>
                <code>
                    <coding>
                    <system value="https://fhir.kbv.de/CodeSystem/KBV_CS_SFHIR_BAR2_WBO" />
                    <code value="341" />
                    <display value="FA Kinder- und Jugendmedizin"/>
                    </coding>
                </code>
                </qualification>
            </Practitioner>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:0576a59b-9fdb-40f8-9cc1-ea12949b4946"/>
        <resource>
            <PractitionerRole>
                <id value="0576a59b-9fdb-40f8-9cc1-ea12949b4946" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitionerrole|1.1.0" />
                </meta>
                <practitioner>
                    <reference value="urn:uuid:aa529572-b921-42ce-b53d-7ae21cbbafa3" />
                </practitioner>
                <organization>
                    <reference value="urn:uuid:6afd91f8-88e9-41e3-80c7-000ad6cea991" />
                </organization>
        </PractitionerRole>
        </resource>
    </entry>
</Bundle>",
        "<Bundle xmlns="http://hl7.org/fhir">
    <id value="3fdcf9ac-ad6e-4b4c-9c6c-00306ce765a3" />
    <meta>
        <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Bundle_Entry|1.1.0" />
    </meta>
    <identifier>
        <system value="urn:ietf:rfc:3986"/>
        <value value="urn:uuid:3fdcf9ac-ad6e-4b4c-9c6c-00306ce765a3"/>
    </identifier>
    <type value ="document"/>
    <timestamp value="2015-04-07T16:00:02Z"/>
    <entry>
        <fullUrl value="urn:uuid:84017237-2f94-41eb-8426-19ca6cc64a41"/>
        <resource>
            <Composition>
                <id value="84017237-2f94-41eb-8426-19ca6cc64a41" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Composition_Prime|1.1.0" />
                </meta>
                <text>
                    <status value ="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                        <h1>Composition</h1>
                    </div>
                </text>
                <status value ="final"/>
                <type>
                    <coding>
                        <system value="http://loinc.org" />
                        <code value="11369-6" />
                        <display value="History of Immunization Narrative"/>
                    </coding>
                </type>
                <subject>
                    <reference value ="urn:uuid:7514003a-9d44-4295-8f4b-0776048da540"/>
                </subject>
                <date value="2015-04-07"/>
                <author>
                    <reference value="urn:uuid:ac371df7-c2ac-4dca-9b29-0d5f5064fdbf"/>
                </author>
                <title value="Impfass"/>
                <section>
                    <code>
                        <coding>
                            <system value="http://snomed.info/sct" />
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value="713404003" />
                            <display value="Vaccination given (situation)"/>
                        </coding>
                    </code>
                    <entry>
                        <reference value ="urn:uuid:fe37fdf4-ba1e-46cc-9dcb-1e08e6aaaa3a"/>
                    </entry>
                </section>
            </Composition>
        </resource>
    </entry>
    <entry>
        <fullUrl value ="urn:uuid:752ab8ef-8a83-42bb-b4de-c57a1e402c60"/>
        <resource>
            <Organization>
                <id value="752ab8ef-8a83-42bb-b4de-c57a1e402c60" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Organization|1.1.0" />
                </meta>
                <name value="Praxis Dr. Edgar Schulz" />
                <address>
                    <type value="both" />
                    <line value="Wladimir-Wiese-Straße 9/8">
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber">
                            <valueString value="9/8" />
                        </extension>
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName">
                            <valueString value="Wladimir-Wiese-Straße" />
                        </extension>
                    </line>
                    <city value="Viersen" />
                    <postalCode value="37220" />
                    <country value="D" />
                </address>
            </Organization>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:fe37fdf4-ba1e-46cc-9dcb-1e08e6aaaa3a"/>
        <resource>
            <Immunization>
                <id value="fe37fdf4-ba1e-46cc-9dcb-1e08e6aaaa3a"/>
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Record_Prime|1.1.0"/>
                </meta>
                <text>
                    <status value="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                    <h1>Meningokokken TypC-Injektion</h1>
                    </div>
                </text>
                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Entry_Type">
                    <valueCodeableConcept>
                        <coding>
                            <system value ="https://fhir.kbv.de/CodeSystem/KBV_CS_MIO_Vaccination_Technical_Entry_Type"/>
                            <code value ="Eduii"/>
                            <display value ="Eintrag digital und im Impfausweis"/>
                        </coding>
                    </valueCodeableConcept>
                </extension>
                <extension url = "https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Attester">
                    <extension url= "mode">
                        <valueCodeableConcept>
                            <coding>
                                <system value ="http://hl7.org/fhir/composition-attestation-mode"/>
                                <code value ="legal"/>
                            </coding>
                        </valueCodeableConcept>
                    </extension>
                    <extension url ="party">
                        <valueReference>
                            <reference value ="urn:uuid:ac371df7-c2ac-4dca-9b29-0d5f5064fdbf"/>
                        </valueReference>
                    </extension>
                </extension>
                <status value="completed"/>
                <vaccineCode>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="836401009"/>
                        <display value ="Vaccine product containing Neisseria meningitidis antigen (medicinal product)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Meningokokkenimpfstoff"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/dimdi/atc"/>
                        <version value="atcgm2021" />
                        <code value ="J07AH"/>
                        <display value ="Meningokokken-Impfstoffe"/>
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/ifa/pzn"/>
                        <code value ="01985469"/>
                        <display value ="NeisVac-C®"/>
                    </coding>
                    <text value ="NeisVac-C®"/>
                </vaccineCode>
                <patient>
                    <reference value ="urn:uuid:7514003a-9d44-4295-8f4b-0776048da540"/>
                </patient>
                <occurrenceDateTime value ="2015-04-07"/>
                <primarySource value ="true"/>
                <manufacturer>
                    <display value ="Pfizer Pharma GmbH"/>
                </manufacturer>
                <lotNumber value ="142069A"/>
                <note> 
                    <text value ="Bei einer ungewöhnlichen Impfreaktion sollte die impfende ärztliche Person benachrichtigt werden. Die ärztlich tätige Person hat, wenn der Verdacht einer gesundheitlichen Schädigung besteht, die über das übliche Ausmaß einer Impfreaktion hinaus geht verpflichtet, den Verdacht dem zuständigen Gesundheitsamt namentlich zu melden (§ 6 Absatz 1 Nr 3 des lnfektionsschutzgesetzes • lfSG) Im Falle eines Impfschadens besteht unter den Voraussetzungen des § 60 Absatz 1 lfSG ein Anspruch auf Entschädigung in entsprechender Anwendung der Vorschriften des Bundesversorgungsgesetzes. Der Antrag ist bei der für die Durchführung des Bundesversorgungsgesetzes zuständigen Behörde (§ 64 Absatz 1 lfSG, i.d.R. 'Versorgungsamt') zu stellen. Weitere Auskünfte erteilt das zuständige Gesundheitsamt."/> 
                </note>
                <protocolApplied>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="23511006"/>
                            <display value ="Meningococcal infectious disease (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Meningokokken-Infektion"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <doseNumberString>
                        <extension url ="http://hl7.org/fhir/StructureDefinition/data-absent-reason">
                            <valueCode value ="unknown"/>
                        </extension>
                    </doseNumberString>
                </protocolApplied>
            </Immunization>
        </resource>
    </entry>
    <entry>
        <fullUrl value ="urn:uuid:7514003a-9d44-4295-8f4b-0776048da540"/>
        <resource>
            <Patient>
                <id value="7514003a-9d44-4295-8f4b-0776048da540" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Patient|1.1.0" />
                </meta>
                <identifier>
                    <type>
                        <coding>
                            <system value="http://fhir.de/CodeSystem/identifier-type-de-basis" />
                            <code value="GKV" />
                            <display value ="Gesetzliche Krankenversicherung"/>
                        </coding>
                    </type>
                    <system value="http://fhir.de/NamingSystem/gkv/kvid-10" />
                    <value value="B783522772" />
                </identifier>
                <name>
                <use value="official" />
                    <text value="Wiebke Metzger" />
                    <family value="Metzger">
                        <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                            <valueString value="Metzger" />
                        </extension>
                    </family>
                    <given value="Wiebke" />
                </name>
                <gender value="female" />
                <birthDate value="2014-02-17" />
            </Patient>
        </resource>
    </entry>
    <entry>
        <fullUrl value ="urn:uuid:f0f20c0e-5dc7-4d83-b077-95c1b3191d86"/>
        <resource>
            <Practitioner>
                <id value="f0f20c0e-5dc7-4d83-b077-95c1b3191d86" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitioner|1.1.0" />
                </meta>
                <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Additional_Comment">
                <valueString value="Behandelnder Arzt" />
                </extension>
                <identifier>
                <type>
                    <coding>
                    <system value="http://terminology.hl7.org/CodeSystem/v2-0203" />
                    <code value="LANR" />
                    </coding>
                </type>
                <system value="https://fhir.kbv.de/NamingSystem/KBV_NS_Base_ANR" />
                <value value="520886234" />
                </identifier>
                <name>
                <use value="official" />
                <family value="Schulz">
                    <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                    <valueString value="Schulz" />
                    </extension>
                </family>
                <given value="Edgar" />
                <prefix value="Dr.">
                    <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier">
                    <valueCode value="AC" />
                    </extension>
                </prefix>
                </name>
                <telecom>
                <system value="phone" />
                <value value="+49(0)9853111893" />
                </telecom>
            <qualification>
                <code>
                    <coding>
                    <system value="https://fhir.kbv.de/CodeSystem/KBV_CS_SFHIR_BAR2_WBO" />
                    <code value="341" />
                    <display value="FA Kinder- und Jugendmedizin"/>
                    </coding>
                </code>
                </qualification>
            </Practitioner>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:ac371df7-c2ac-4dca-9b29-0d5f5064fdbf"/>
        <resource>
            <PractitionerRole>
                <id value="ac371df7-c2ac-4dca-9b29-0d5f5064fdbf" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitionerrole|1.1.0" />
                </meta>
                <practitioner>
                    <reference value="urn:uuid:f0f20c0e-5dc7-4d83-b077-95c1b3191d86" />
                </practitioner>
                <organization>
                    <reference value="urn:uuid:752ab8ef-8a83-42bb-b4de-c57a1e402c60" />
                </organization>
            </PractitionerRole>
        </resource>
    </entry>
</Bundle>",
        "<Bundle xmlns="http://hl7.org/fhir">
    <id value="8f062829-1c1e-4339-a00f-e6287110000f" />
    <meta>
        <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Bundle_Entry|1.1.0" />
    </meta>
    <identifier>
        <system value="urn:ietf:rfc:3986"/>
        <value value="urn:uuid:8f062829-1c1e-4339-a00f-e6287110000f"/>
    </identifier>
    <type value ="document"/>
    <timestamp value="2015-10-06T16:00:02Z"/>
    <entry>
        <fullUrl value ="urn:uuid:4f1ce241-16a9-4da6-9595-273515c1dbac"/>
        <resource>
            <Composition>
                <id value="4f1ce241-16a9-4da6-9595-273515c1dbac" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Composition_Prime|1.1.0" />
                </meta>
                <text>
                    <status value ="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                        <h1>Composition</h1>
                    </div>
                </text>
                <status value ="final"/>
                <type>
                    <coding>
                        <system value="http://loinc.org" />
                        <code value="11369-6" />
                        <display value="History of Immunization Narrative"/>
                    </coding>
                </type>
                <subject>
                    <reference value ="urn:uuid:d6c9a2c0-fabe-4f7b-84c1-5d99ab86d726"/>
                </subject>
                <date value="2015-10-06"/>
                <author>
                    <reference value="urn:uuid:d5e17087-3410-46c7-adec-db7decde47e7"/>
                </author>
                <title value="Impfass"/>
                <section>
                    <code>
                        <coding>
                            <system value="http://snomed.info/sct" />
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value="713404003" />
                            <display value="Vaccination given (situation)"/>
                        </coding>
                    </code>
                    <entry>
                        <reference value ="urn:uuid:d5721945-b0c2-4bc6-adfb-c11f393b64be"/>
                    </entry>
                    <entry>
                        <reference value ="urn:uuid:c0c6197a-b0dc-463b-8d19-8b4a5a13f8ff"/>
                    </entry>
                </section>
            </Composition>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:806d3d53-3a97-4086-a90b-8bbb6d9674db"/>
        <resource>
            <Organization>
                <id value="806d3d53-3a97-4086-a90b-8bbb6d9674db" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Organization|1.1.0" />
                </meta>
                <name value="Praxis Dr. Edgar Schulz" />
                <address>
                    <type value="both" />
                    <line value="Wladimir-Wiese-Straße 9/8">
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber">
                            <valueString value="9/8" />
                        </extension>
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName">
                            <valueString value="Wladimir-Wiese-Straße" />
                        </extension>
                    </line>
                    <city value="Viersen" />
                    <postalCode value="37220" />
                    <country value="D" />
                </address>
            </Organization>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:c0c6197a-b0dc-463b-8d19-8b4a5a13f8ff"/>
        <resource>
            <Immunization>
                <id value="c0c6197a-b0dc-463b-8d19-8b4a5a13f8ff"/>
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Record_Prime|1.1.0"/>
                </meta>
                <text>
                    <status value="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                    <h1>Pneumokokken-Injektion</h1>
                    </div>
                </text>
                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Entry_Type">
                    <valueCodeableConcept>
                        <coding>
                            <system value ="https://fhir.kbv.de/CodeSystem/KBV_CS_MIO_Vaccination_Technical_Entry_Type"/>
                            <code value ="Eduii"/>
                            <display value ="Eintrag digital und im Impfausweis"/>
                        </coding>
                    </valueCodeableConcept>
                </extension>
                <extension url = "https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Attester">
                    <extension url= "mode">
                        <valueCodeableConcept>
                            <coding>
                                <system value ="http://hl7.org/fhir/composition-attestation-mode"/>
                                <code value ="legal"/>
                            </coding>
                        </valueCodeableConcept>
                    </extension>
                    <extension url ="party">
                        <valueReference>
                            <reference value ="urn:uuid:d5e17087-3410-46c7-adec-db7decde47e7"/>
                        </valueReference>
                    </extension>
                </extension>
                <status value="completed"/>
                <vaccineCode>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="836398006"/>
                        <display value ="Vaccine product containing Streptococcus pneumoniae antigen (medicinal product)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Pneumokokkenimpfstoff"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/dimdi/atc"/>
                        <version value="atcgm2021" />
                        <code value ="J07AL"/>
                        <display value ="Pneumokokken-Impfstoffe"/>
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/ifa/pzn"/>
                        <code value ="05496276"/>
                        <display value ="Prevenar 13®"/>
                    </coding>
                    <text value ="Prevenar 13®"/>
                </vaccineCode>
                <patient>
                    <reference value ="urn:uuid:d6c9a2c0-fabe-4f7b-84c1-5d99ab86d726"/>
                </patient>
                <occurrenceDateTime value ="2015-10-06"/>
                <primarySource value ="true"/>
                <manufacturer>
                    <display value ="Pfizer Pharma GmbH"/>
                </manufacturer>
                <lotNumber value ="A26971"/>
                <note> 
                    <text value ="Bei einer ungewöhnlichen Impfreaktion sollte die impfende ärztliche Person benachrichtigt werden. Die ärztlich tätige Person hat, wenn der Verdacht einer gesundheitlichen Schädigung besteht, die über das übliche Ausmaß einer Impfreaktion hinaus geht verpflichtet, den Verdacht dem zuständigen Gesundheitsamt namentlich zu melden (§ 6 Absatz 1 Nr 3 des lnfektionsschutzgesetzes • lfSG) Im Falle eines Impfschadens besteht unter den Voraussetzungen des § 60 Absatz 1 lfSG ein Anspruch auf Entschädigung in entsprechender Anwendung der Vorschriften des Bundesversorgungsgesetzes. Der Antrag ist bei der für die Durchführung des Bundesversorgungsgesetzes zuständigen Behörde (§ 64 Absatz 1 lfSG, i.d.R. 'Versorgungsamt') zu stellen. Weitere Auskünfte erteilt das zuständige Gesundheitsamt."/> 
                </note>
                <protocolApplied>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="16814004"/>
                            <display value ="Pneumococcal infectious disease (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Pneumokokken-Infektion"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <doseNumberString>
                        <extension url ="http://hl7.org/fhir/StructureDefinition/data-absent-reason">
                            <valueCode value ="unknown"/>
                        </extension>
                    </doseNumberString>
                </protocolApplied>
            </Immunization>
        </resource>
    </entry>
    <entry>
        <fullUrl value ="urn:uuid:d5721945-b0c2-4bc6-adfb-c11f393b64be"/>
        <resource>
            <Immunization>
                <id value="d5721945-b0c2-4bc6-adfb-c11f393b64be"/>
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Record_Prime|1.1.0"/>
                </meta>
                <text>
                    <status value="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                    <h1>Tetanus, Diphterie, Pertussis, Poliomyelitis, Haemophilus influenzae b, Hepatitis B</h1>
                    </div>
                </text>
                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Entry_Type">
                    <valueCodeableConcept>
                        <coding>
                            <system value ="https://fhir.kbv.de/CodeSystem/KBV_CS_MIO_Vaccination_Technical_Entry_Type"/>
                            <code value ="Eduii"/>
                            <display value ="Eintrag digital und im Impfausweis"/>
                        </coding>
                    </valueCodeableConcept>
                </extension>
                <extension url = "https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Attester">
                    <extension url= "mode">
                        <valueCodeableConcept>
                            <coding>
                                <system value ="http://hl7.org/fhir/composition-attestation-mode"/>
                                <code value ="legal"/>
                            </coding>
                        </valueCodeableConcept>
                    </extension>
                    <extension url ="party">
                        <valueReference>
                            <reference value ="urn:uuid:d5e17087-3410-46c7-adec-db7decde47e7"/>
                        </valueReference>
                    </extension>
                </extension>
                <status value="completed"/>
                <vaccineCode>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="871895005"/>
                        <display value ="Vaccine product containing only Bordetella pertussis and Clostridium tetani and Corynebacterium diphtheriae and Haemophilus influenzae type B and Hepatitis B virus and Human poliovirus antigens (medicinal product)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Diphtherie-Haemophilus influenzae B-Pertussis, Poliomyelitis, Tetanus, Hepatitis B-Impfstoff"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/dimdi/atc"/>
                        <version value="atcgm2021" />
                        <code value ="J07CA09"/>
                        <display value ="Diphtherie-Haemophilus influenzae  B-Pertussis-Poliomyelitis-Tetanus-Hepatitis B"/>
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/ifa/pzn"/>
                        <code value ="10538539"/>
                        <display value ="Infanrix hexa®"/>
                    </coding>
                    <text value ="Infanrix hexa®"/>
                </vaccineCode>
                <patient>
                    <reference value ="urn:uuid:d6c9a2c0-fabe-4f7b-84c1-5d99ab86d726"/>
                </patient>
                <occurrenceDateTime value ="2015-10-06"/>
                <primarySource value ="true"/>
                <manufacturer>
                    <display value ="GlaxoSmithKline GmbH &amp; Co. KG"/>
                </manufacturer>
                <lotNumber value ="MKGZTVWSY"/>
                <note> 
                    <text value ="Bei einer ungewöhnlichen Impfreaktion sollte die impfende ärztliche Person benachrichtigt werden. Die ärztlich tätige Person hat, wenn der Verdacht einer gesundheitlichen Schädigung besteht, die über das übliche Ausmaß einer Impfreaktion hinaus geht verpflichtet, den Verdacht dem zuständigen Gesundheitsamt namentlich zu melden (§ 6 Absatz 1 Nr 3 des lnfektionsschutzgesetzes • lfSG) Im Falle eines Impfschadens besteht unter den Voraussetzungen des § 60 Absatz 1 lfSG ein Anspruch auf Entschädigung in entsprechender Anwendung der Vorschriften des Bundesversorgungsgesetzes. Der Antrag ist bei der für die Durchführung des Bundesversorgungsgesetzes zuständigen Behörde (§ 64 Absatz 1 lfSG, i.d.R. 'Versorgungsamt') zu stellen. Weitere Auskünfte erteilt das zuständige Gesundheitsamt."/> 
                </note>
                <protocolApplied>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="76902006"/>
                            <display value ="Tetanus (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Tetanus-Infektion"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="397430003"/>
                            <display value ="Diphtheria caused by Corynebacterium diphtheriae (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Diphtherie"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="27836007"/>
                            <display value ="Pertussis (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Pertussis"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="398102009"/>
                            <display value ="Acute poliomyelitis (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Poliomyelitis"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="709410003"/>
                            <display value ="Haemophilus influenzae type b infection (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Haemophilus-influenzae-Typ-B-Infektion"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="66071002"/>
                            <display value ="Viral hepatitis type B (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Hepatitis B"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <doseNumberString>
                        <extension url ="http://hl7.org/fhir/StructureDefinition/data-absent-reason">
                            <valueCode value ="unknown"/>
                        </extension>
                    </doseNumberString>
                </protocolApplied>
            </Immunization>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:d6c9a2c0-fabe-4f7b-84c1-5d99ab86d726"/>
        <resource>
            <Patient>
                <id value="d6c9a2c0-fabe-4f7b-84c1-5d99ab86d726" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Patient|1.1.0" />
                </meta>
                <identifier>
                    <type>
                        <coding>
                            <system value="http://fhir.de/CodeSystem/identifier-type-de-basis" />
                            <code value="GKV" />
                            <display value ="Gesetzliche Krankenversicherung"/>
                        </coding>
                    </type>
                    <system value="http://fhir.de/NamingSystem/gkv/kvid-10" />
                    <value value="B783522772" />
                </identifier>
                <name>
                <use value="official" />
                    <text value="Wiebke Metzger" />
                    <family value="Metzger">
                        <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                            <valueString value="Metzger" />
                        </extension>
                    </family>
                    <given value="Wiebke" />
                </name>
                <gender value="female" />
                <birthDate value="2014-02-17" />
            </Patient>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:2190041c-fe26-4d98-9993-ccb0437cbeff"/>
        <resource>
            <Practitioner>
                <id value="2190041c-fe26-4d98-9993-ccb0437cbeff" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitioner|1.1.0" />
                </meta>
                <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Additional_Comment">
                <valueString value="Behandelnder Arzt" />
                </extension>
                <identifier>
                <type>
                    <coding>
                    <system value="http://terminology.hl7.org/CodeSystem/v2-0203" />
                    <code value="LANR" />
                    </coding>
                </type>
                <system value="https://fhir.kbv.de/NamingSystem/KBV_NS_Base_ANR" />
                <value value="520886234" />
                </identifier>
                <name>
                <use value="official" />
                <family value="Schulz">
                    <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                    <valueString value="Schulz" />
                    </extension>
                </family>
                <given value="Edgar" />
                <prefix value="Dr.">
                    <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier">
                    <valueCode value="AC" />
                    </extension>
                </prefix>
                </name>
                <telecom>
                <system value="phone" />
                <value value="+49(0)9853111893" />
                </telecom>
            <qualification>
                <code>
                    <coding>
                    <system value="https://fhir.kbv.de/CodeSystem/KBV_CS_SFHIR_BAR2_WBO" />
                    <code value="341" />
                    <display value="FA Kinder- und Jugendmedizin"/>
                    </coding>
                </code>
                </qualification>
            </Practitioner>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:d5e17087-3410-46c7-adec-db7decde47e7"/>
        <resource>
            <PractitionerRole>
                <id value="d5e17087-3410-46c7-adec-db7decde47e7" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitionerrole|1.1.0" />
                </meta>
                <practitioner>
                    <reference value="urn:uuid:2190041c-fe26-4d98-9993-ccb0437cbeff" />
                </practitioner>
                <organization>
                    <reference value="urn:uuid:806d3d53-3a97-4086-a90b-8bbb6d9674db" />
                </organization>
            </PractitionerRole>
        </resource>
    </entry>
</Bundle>",
        "<Bundle xmlns="http://hl7.org/fhir">
    <id value="079bd487-07a2-4e86-98ac-205c83aa7abd" />
    <meta>
        <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Bundle_Entry|1.1.0" />
    </meta>
    <identifier>
        <system value="urn:ietf:rfc:3986"/>
        <value value="urn:uuid:079bd487-07a2-4e86-98ac-205c83aa7abd"/>
    </identifier>
    <type value ="document"/>
    <timestamp value="2015-11-25T16:00:02Z"/>
    <entry>
        <fullUrl value ="urn:uuid:1c4b9522-d2c6-4ef7-b2ac-ee4ff7669387"/>
        <resource>
            <Composition>
                <id value="1c4b9522-d2c6-4ef7-b2ac-ee4ff7669387" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Composition_Prime|1.1.0" />
                </meta>
                <text>
                    <status value ="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                        <h1>Composition</h1>
                    </div>
                </text>
                <status value ="final"/>
                <type>
                    <coding>
                        <system value="http://loinc.org" />
                        <code value="11369-6" />
                        <display value="History of Immunization Narrative"/>
                    </coding>
                </type>
                <subject>
                    <reference value ="urn:uuid:79e2c455-d1ed-4b97-b817-de555fdcf8df"/>
                </subject>
                <date value="2015-11-25"/>
                <author>
                    <reference value="urn:uuid:70a8c19d-44f4-4618-92c0-b21334c55711"/>
                </author>
                <title value="Impfass"/>
                <section>
                    <code>
                        <coding>
                            <system value="http://snomed.info/sct" />
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value="713404003" />
                            <display value="Vaccination given (situation)"/>
                        </coding>
                    </code>
                    <entry>
                        <reference value ="urn:uuid:6cd21ccd-9dd0-4ffd-b962-240e64431852"/>
                    </entry>
                </section>
            </Composition>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:2207e25e-4e61-4f0d-b8e6-473ec65ca92f"/>
        <resource>
            <Organization>
                <id value="2207e25e-4e61-4f0d-b8e6-473ec65ca92f" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Organization|1.1.0" />
                </meta>
                <name value="Praxis Dr. Edgar Schulz" />
                <address>
                    <type value="both" />
                    <line value="Wladimir-Wiese-Straße 9/8">
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber">
                            <valueString value="9/8" />
                        </extension>
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName">
                            <valueString value="Wladimir-Wiese-Straße" />
                        </extension>
                    </line>
                    <city value="Viersen" />
                    <postalCode value="37220" />
                    <country value="D" />
                </address>
            </Organization>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:6cd21ccd-9dd0-4ffd-b962-240e64431852"/>
        <resource>
            <Immunization>
                <id value="6cd21ccd-9dd0-4ffd-b962-240e64431852"/>
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Record_Prime|1.1.0"/>
                </meta>
                <text>
                    <status value="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                    <h1>Meningokokken-Injektion</h1>
                    </div>
                </text>
                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Entry_Type">
                    <valueCodeableConcept>
                        <coding>
                            <system value ="https://fhir.kbv.de/CodeSystem/KBV_CS_MIO_Vaccination_Technical_Entry_Type"/>
                            <code value ="Eduii"/>
                            <display value ="Eintrag digital und im Impfausweis"/>
                        </coding>
                    </valueCodeableConcept>
                </extension>
                <extension url = "https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Attester">
                    <extension url= "mode">
                        <valueCodeableConcept>
                            <coding>
                                <system value ="http://hl7.org/fhir/composition-attestation-mode"/>
                                <code value ="legal"/>
                            </coding>
                        </valueCodeableConcept>
                    </extension>
                    <extension url ="party">
                        <valueReference>
                            <reference value ="urn:uuid:70a8c19d-44f4-4618-92c0-b21334c55711"/>
                        </valueReference>
                    </extension>
                </extension>
                <status value="completed"/>
                <vaccineCode>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="836401009"/>
                        <display value ="Vaccine product containing Neisseria meningitidis antigen (medicinal product)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Meningokokkenimpfstoff"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/dimdi/atc"/>
                        <version value="atcgm2021" />
                        <code value ="J07AH"/>
                        <display value ="Meningokokken-Impfstoffe"/>
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/ifa/pzn"/>
                        <code value ="09461122"/>
                        <display value ="BEXSERO®"/>
                    </coding>
                    <text value ="BEXSERO®"/>
                </vaccineCode>
                <patient>
                    <reference value ="urn:uuid:79e2c455-d1ed-4b97-b817-de555fdcf8df"/>
                </patient>
                <occurrenceDateTime value ="2015-11-25"/>
                <primarySource value ="true"/>
                <manufacturer>
                    <display value ="GlaxoSmithKline GmbH &amp; Co. KG"/>
                </manufacturer>
                <lotNumber value ="235824"/>
                <note> 
                    <text value ="Bei einer ungewöhnlichen Impfreaktion sollte die impfende ärztliche Person benachrichtigt werden. Die ärztlich tätige Person hat, wenn der Verdacht einer gesundheitlichen Schädigung besteht, die über das übliche Ausmaß einer Impfreaktion hinaus geht verpflichtet, den Verdacht dem zuständigen Gesundheitsamt namentlich zu melden (§ 6 Absatz 1 Nr 3 des lnfektionsschutzgesetzes • lfSG) Im Falle eines Impfschadens besteht unter den Voraussetzungen des § 60 Absatz 1 lfSG ein Anspruch auf Entschädigung in entsprechender Anwendung der Vorschriften des Bundesversorgungsgesetzes. Der Antrag ist bei der für die Durchführung des Bundesversorgungsgesetzes zuständigen Behörde (§ 64 Absatz 1 lfSG, i.d.R. 'Versorgungsamt') zu stellen. Weitere Auskünfte erteilt das zuständige Gesundheitsamt."/> 
                </note>
                <note>
                    <text value="Gegen Meningokokken Typ B"/>
                </note>
                <protocolApplied>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="23511006"/>
                            <display value ="Meningococcal infectious disease (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Meningokokken-Infektion"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <doseNumberString>
                        <extension url ="http://hl7.org/fhir/StructureDefinition/data-absent-reason">
                            <valueCode value ="unknown"/>
                        </extension>
                    </doseNumberString>
                </protocolApplied>
            </Immunization>
        </resource>
    </entry>
    <entry>
        <fullUrl value ="urn:uuid:79e2c455-d1ed-4b97-b817-de555fdcf8df"/>
        <resource>
            <Patient xmlns="http://hl7.org/fhir">
                <id value="79e2c455-d1ed-4b97-b817-de555fdcf8df" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Patient|1.1.0" />
                </meta>
                <identifier>
                    <type>
                        <coding>
                            <system value="http://fhir.de/CodeSystem/identifier-type-de-basis" />
                            <code value="GKV" />
                            <display value ="Gesetzliche Krankenversicherung"/>
                        </coding>
                    </type>
                    <system value="http://fhir.de/NamingSystem/gkv/kvid-10" />
                    <value value="B783522772" />
                </identifier>
                <name>
                <use value="official" />
                    <text value="Wiebke Metzger" />
                    <family value="Metzger">
                        <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                            <valueString value="Metzger" />
                        </extension>
                    </family>
                    <given value="Wiebke" />
                </name>
                <gender value="female" />
                <birthDate value="2014-02-17" />
            </Patient>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:4b89e12d-4f07-44a8-9c4d-a800cd461403"/>
        <resource>
            <Practitioner>
                <id value="4b89e12d-4f07-44a8-9c4d-a800cd461403" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitioner|1.1.0" />
                </meta>
                <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Additional_Comment">
                <valueString value="Behandelnder Arzt" />
                </extension>
                <identifier>
                <type>
                    <coding>
                    <system value="http://terminology.hl7.org/CodeSystem/v2-0203" />
                    <code value="LANR" />
                    </coding>
                </type>
                <system value="https://fhir.kbv.de/NamingSystem/KBV_NS_Base_ANR" />
                <value value="520886234" />
                </identifier>
                <name>
                <use value="official" />
                <family value="Schulz">
                    <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                    <valueString value="Schulz" />
                    </extension>
                </family>
                <given value="Edgar" />
                <prefix value="Dr.">
                    <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier">
                    <valueCode value="AC" />
                    </extension>
                </prefix>
                </name>
                <telecom>
                <system value="phone" />
                <value value="+49(0)9853111893" />
                </telecom>
            <qualification>
                <code>
                    <coding>
                    <system value="https://fhir.kbv.de/CodeSystem/KBV_CS_SFHIR_BAR2_WBO" />
                    <code value="341" />
                    <display value="FA Kinder- und Jugendmedizin"/>
                    </coding>
                </code>
                </qualification>
            </Practitioner>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:70a8c19d-44f4-4618-92c0-b21334c55711"/>
        <resource>
            <PractitionerRole>
                <id value="70a8c19d-44f4-4618-92c0-b21334c55711" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitionerrole|1.1.0" />
                </meta>
                <practitioner>
                    <reference value="urn:uuid:4b89e12d-4f07-44a8-9c4d-a800cd461403" />
                </practitioner>
                <organization>
                    <reference value="urn:uuid:2207e25e-4e61-4f0d-b8e6-473ec65ca92f" />
                </organization>
                </PractitionerRole>
        </resource>
    </entry>
</Bundle>",
        "<Bundle xmlns="http://hl7.org/fhir">
    <id value="8097b59d-00ad-4c3c-a854-12136ba7acf7" />
    <meta>
        <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Bundle_Entry|1.1.0" />
    </meta>
    <identifier>
        <system value="urn:ietf:rfc:3986"/>
        <value value="urn:uuid:8097b59d-00ad-4c3c-a854-12136ba7acf7"/>
    </identifier>
    <type value ="document"/>
    <timestamp value="2019-04-09T16:00:02Z"/>
    <entry>
        <fullUrl value="urn:uuid:2e6450f9-9c09-421b-b3cc-90f7bb4a7870"/>
        <resource>
            <Composition>
                <id value="2e6450f9-9c09-421b-b3cc-90f7bb4a7870" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Composition_Prime|1.1.0" />
                </meta>
                <text>
                    <status value ="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                        <h1>Composition</h1>
                    </div>
                </text>
                <status value ="final"/>
                <type>
                    <coding>
                        <system value="http://loinc.org" />
                        <code value="11369-6" />
                        <display value="History of Immunization Narrative"/>
                    </coding>
                </type>
                <subject>
                    <reference value ="urn:uuid:78b52b79-b5b9-4e9b-a78b-0eba4dd03e0d"/>
                </subject>
                <date value="2019-04-09"/>
                <author>
                    <reference value="urn:uuid:fe7dda1d-b42b-4d5a-bc38-a33f99e8e1c9"/>
                </author>
                <title value="Impfass"/>
                <section>
                    <code>
                        <coding>
                            <system value="http://snomed.info/sct" />
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value="713404003" />
                            <display value="Vaccination given (situation)"/>
                        </coding>
                    </code>
                    <entry>
                        <reference value ="urn:uuid:862634e3-753b-4785-8ab5-af5fd4be6d19"/>
                    </entry>
                </section>
            </Composition>
        </resource>
    </entry>
    <entry>
        <fullUrl value ="urn:uuid:b7443499-af32-4290-9b35-c6096ad7bdc3"/>
        <resource>
            <Organization>
                <id value="b7443499-af32-4290-9b35-c6096ad7bdc3" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Organization|1.1.0" />
                </meta>
                <name value="Praxis Dr. Edgar Schulz" />
                <address>
                    <type value="both" />
                    <line value="Wladimir-Wiese-Straße 9/8">
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber">
                            <valueString value="9/8" />
                        </extension>
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName">
                            <valueString value="Wladimir-Wiese-Straße" />
                        </extension>
                    </line>
                    <city value="Viersen" />
                    <postalCode value="37220" />
                    <country value="D" />
                </address>
            </Organization>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:862634e3-753b-4785-8ab5-af5fd4be6d19"/>
        <resource>
            <Immunization>
                <id value="862634e3-753b-4785-8ab5-af5fd4be6d19"/>
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Record_Prime|1.1.0"/>
                </meta>
                <text>
                    <status value="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                    <h1>Auffrischimpfung Tetanus, Diphterie, Pertussis</h1>
                    </div>
                </text>
                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Entry_Type">
                    <valueCodeableConcept>
                        <coding>
                            <system value ="https://fhir.kbv.de/CodeSystem/KBV_CS_MIO_Vaccination_Technical_Entry_Type"/>
                            <code value ="Eduii"/>
                            <display value ="Eintrag digital und im Impfausweis"/>
                        </coding>
                    </valueCodeableConcept>
                </extension>
                <extension url = "https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Attester">
                    <extension url= "mode">
                        <valueCodeableConcept>
                            <coding>
                                <system value ="http://hl7.org/fhir/composition-attestation-mode"/>
                                <code value ="legal"/>
                            </coding>
                        </valueCodeableConcept>
                    </extension>
                    <extension url ="party">
                        <valueReference>
                            <reference value ="urn:uuid:fe7dda1d-b42b-4d5a-bc38-a33f99e8e1c9"/>
                        </valueReference>
                    </extension>
                </extension>
                <status value="completed"/>
                <vaccineCode>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="871875004"/>
                        <display value ="Vaccine product containing only Bordetella pertussis and Clostridium tetani and Corynebacterium diphtheriae antigens (medicinal product)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Pertussis, gereinigtes Antigen, Kombinationen mit Toxoiden (Pertussis, Tetanus, Diphtherie-Impfstoff))"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/dimdi/atc"/>
                        <version value="atcgm2021" />
                        <code value ="J07AJ52"/>
                        <display value ="Pertussis, gereinigtes Antigen, Kombinationen mit Toxoiden"/>
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/ifa/pzn"/>
                        <code value ="00633923"/>
                        <display value ="boostrix®"/>
                    </coding>
                    <text value ="boostrix®"/>
                </vaccineCode>
                <patient>
                    <reference value ="urn:uuid:78b52b79-b5b9-4e9b-a78b-0eba4dd03e0d"/>
                </patient>
                <occurrenceDateTime value ="2019-04-09"/>
                <primarySource value ="true"/>
                <manufacturer>
                    <display value ="GlaxoSmithKline GmbH &amp; Co. KG"/>
                </manufacturer>
                <lotNumber value ="7XM33SLDGD"/>
                <note> 
                    <text value ="Bei einer ungewöhnlichen Impfreaktion sollte die impfende ärztliche Person benachrichtigt werden. Die ärztlich tätige Person hat, wenn der Verdacht einer gesundheitlichen Schädigung besteht, die über das übliche Ausmaß einer Impfreaktion hinaus geht verpflichtet, den Verdacht dem zuständigen Gesundheitsamt namentlich zu melden (§ 6 Absatz 1 Nr 3 des lnfektionsschutzgesetzes • lfSG) Im Falle eines Impfschadens besteht unter den Voraussetzungen des § 60 Absatz 1 lfSG ein Anspruch auf Entschädigung in entsprechender Anwendung der Vorschriften des Bundesversorgungsgesetzes. Der Antrag ist bei der für die Durchführung des Bundesversorgungsgesetzes zuständigen Behörde (§ 64 Absatz 1 lfSG, i.d.R. 'Versorgungsamt') zu stellen. Weitere Auskünfte erteilt das zuständige Gesundheitsamt."/> 
                </note>
                <protocolApplied>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="76902006"/>
                            <display value ="Tetanus (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Tetanus-Infektion"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="397430003"/>
                            <display value ="Diphtheria caused by Corynebacterium diphtheriae (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Diphtherie"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="27836007"/>
                            <display value ="Pertussis (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="Pertussis"/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <doseNumberString>
                        <extension url ="http://hl7.org/fhir/StructureDefinition/data-absent-reason">
                            <valueCode value ="unknown"/>
                        </extension>
                    </doseNumberString>
                </protocolApplied>
            </Immunization>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:78b52b79-b5b9-4e9b-a78b-0eba4dd03e0d"/>
        <resource>
            <Patient>
                <id value="78b52b79-b5b9-4e9b-a78b-0eba4dd03e0d" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Patient|1.1.0" />
                </meta>
                <identifier>
                    <type>
                        <coding>
                            <system value="http://fhir.de/CodeSystem/identifier-type-de-basis" />
                            <code value="GKV" />
                            <display value ="Gesetzliche Krankenversicherung"/>
                        </coding>
                    </type>
                    <system value="http://fhir.de/NamingSystem/gkv/kvid-10" />
                    <value value="B783522772" />
                </identifier>
                <name>
                <use value="official" />
                    <text value="Wiebke Metzger" />
                    <family value="Metzger">
                        <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                            <valueString value="Metzger" />
                        </extension>
                    </family>
                    <given value="Wiebke" />
                </name>
                <gender value="female" />
                <birthDate value="2014-02-17" />
            </Patient>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:3a6b4bed-8daa-47f9-af74-7e315e7c0ac8"/>
        <resource>
            <Practitioner>
                <id value="3a6b4bed-8daa-47f9-af74-7e315e7c0ac8" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitioner|1.1.0" />
                </meta>
                <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Additional_Comment">
                <valueString value="Behandelnder Arzt" />
                </extension>
                <identifier>
                <type>
                    <coding>
                    <system value="http://terminology.hl7.org/CodeSystem/v2-0203" />
                    <code value="LANR" />
                    </coding>
                </type>
                <system value="https://fhir.kbv.de/NamingSystem/KBV_NS_Base_ANR" />
                <value value="520886234" />
                </identifier>
                <name>
                <use value="official" />
                <family value="Schulz">
                    <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                    <valueString value="Schulz" />
                    </extension>
                </family>
                <given value="Edgar" />
                <prefix value="Dr.">
                    <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier">
                    <valueCode value="AC" />
                    </extension>
                </prefix>
                </name>
                <telecom>
                <system value="phone" />
                <value value="+49(0)9853111893" />
                </telecom>
            <qualification>
                <code>
                    <coding>
                    <system value="https://fhir.kbv.de/CodeSystem/KBV_CS_SFHIR_BAR2_WBO" />
                    <code value="341" />
                    <display value="FA Kinder- und Jugendmedizin"/>
                    </coding>
                </code>
                </qualification>
            </Practitioner>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:fe7dda1d-b42b-4d5a-bc38-a33f99e8e1c9"/>
        <resource>
            <PractitionerRole>
                <id value="fe7dda1d-b42b-4d5a-bc38-a33f99e8e1c9" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitionerrole|1.1.0" />
                </meta>
                <practitioner>
                    <reference value="urn:uuid:3a6b4bed-8daa-47f9-af74-7e315e7c0ac8" />
                </practitioner>
                <organization>
                    <reference value="urn:uuid:b7443499-af32-4290-9b35-c6096ad7bdc3" />
                </organization>
            </PractitionerRole>
        </resource>
    </entry>
</Bundle>",
        "<Bundle xmlns="http://hl7.org/fhir">
    <id value="22ce9a8f-cbed-4ef6-bc32-1944e14ea3f7" />
    <meta>
        <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Bundle_Entry|1.1.0" />
    </meta>
    <identifier>
        <system value="urn:ietf:rfc:3986"/>
        <value value="urn:uuid:"/>
    </identifier>
    <type value ="document"/>
    <timestamp value="2021-11-24T16:00:02Z"/>
    <entry>
        <fullUrl value="urn:uuid:5a653c4f-bea9-4667-9764-5f424efbb54d"/>
        <resource>
            <Composition>
                <id value="5a653c4f-bea9-4667-9764-5f424efbb54d" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Composition_Prime|1.1.0" />
                </meta>
                <text>
                    <status value ="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                        <h1>Composition</h1>
                    </div>
                </text>
                <status value ="final"/>
                <type>
                    <coding>
                        <system value="http://loinc.org" />
                        <code value="11369-6" />
                        <display value="History of Immunization Narrative"/>
                    </coding>
                </type>
                <subject>
                    <reference value ="urn:uuid:65ee3fb7-14f9-4a1f-86dc-66a06198cbdd"/>
                </subject>
                <date value="2021-11-24"/>
                <author>
                    <reference value="urn:uuid:a683c67d-665e-4da3-9083-daa5cb9d4e47"/>
                </author>
                <title value="Impfass"/>
                <section>
                    <code>
                        <coding>
                            <system value="http://snomed.info/sct" />
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value="713404003" />
                            <display value="Vaccination given (situation)"/>
                        </coding>
                    </code>
                    <entry>
                        <reference value ="urn:uuid:7ae9b5cd-3d04-4c88-8bb7-01b26a4f5b2e"/>
                    </entry>
                </section>
            </Composition>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:f6db1da6-8313-452a-bcc5-ac711bcb35b2"/>
        <resource>
            <Organization>
                <id value="f6db1da6-8313-452a-bcc5-ac711bcb35b2" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Organization|1.1.0" />
                </meta>
                <name value="Praxis Dr. Edgar Schulz" />
                <address>
                    <type value="both" />
                    <line value="Wladimir-Wiese-Straße 9/8">
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber">
                            <valueString value="9/8" />
                        </extension>
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName">
                            <valueString value="Wladimir-Wiese-Straße" />
                        </extension>
                    </line>
                    <city value="Viersen" />
                    <postalCode value="37220" />
                    <country value="D" />
                </address>
            </Organization>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:7ae9b5cd-3d04-4c88-8bb7-01b26a4f5b2e"/>
        <resource>
            <Immunization>
                <id value="7ae9b5cd-3d04-4c88-8bb7-01b26a4f5b2e"/>
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Record_Prime|1.1.0"/>
                </meta>
                <text>
                    <status value="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                    <h1>Corona-Impfung</h1>
                    </div>
                </text>
                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Entry_Type">
                    <valueCodeableConcept>
                        <coding>
                            <system value ="https://fhir.kbv.de/CodeSystem/KBV_CS_MIO_Vaccination_Technical_Entry_Type"/>
                            <code value ="Eduii"/>
                            <display value ="Eintrag digital und im Impfausweis"/>
                        </coding>
                    </valueCodeableConcept>
                </extension>
                <extension url = "https://fhir.kbv.de/StructureDefinition/KBV_EX_MIO_Vaccination_Attester">
                    <extension url= "mode">
                        <valueCodeableConcept>
                            <coding>
                                <system value ="http://hl7.org/fhir/composition-attestation-mode"/>
                                <code value ="legal"/>
                            </coding>
                        </valueCodeableConcept>
                    </extension>
                    <extension url ="party">
                        <valueReference>
                            <reference value ="urn:uuid:a683c67d-665e-4da3-9083-daa5cb9d4e47"/>
                        </valueReference>
                    </extension>
                </extension>
                <status value="completed"/>
                <vaccineCode>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="1119349007"/>
                        <display value ="Vaccine product containing only Severe acute respiratory syndrome coronavirus 2 messenger ribonucleic acid (medicinal product)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Covid-19-Impfstoff"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/dimdi/atc"/>
                        <version value="atcgm2021" />
                        <code value ="J07BX03"/>
                        <display value ="Covid-19-Impfstoffe"/>
                    </coding>
                    <coding>
                        <system value ="http://fhir.de/CodeSystem/ifa/pzn"/>
                        <code value ="17377588"/>
                        <display value ="COMIRNATY®"/>
                    </coding>
                    <text value ="COMIRNATY®"/>
                </vaccineCode>
                <patient>
                    <reference value ="urn:uuid:65ee3fb7-14f9-4a1f-86dc-66a06198cbdd"/>
                </patient>
                <occurrenceDateTime value ="2021-11-24"/>
                <primarySource value ="true"/>
                <manufacturer>
                    <display value ="BioNTech/Pfizer"/>
                </manufacturer>
                <lotNumber value ="68QGYSI"/>
                <note> 
                    <text value ="Bei einer ungewöhnlichen Impfreaktion sollte die impfende ärztliche Person benachrichtigt werden. Die ärztlich tätige Person hat, wenn der Verdacht einer gesundheitlichen Schädigung besteht, die über das übliche Ausmaß einer Impfreaktion hinaus geht verpflichtet, den Verdacht dem zuständigen Gesundheitsamt namentlich zu melden (§ 6 Absatz 1 Nr 3 des lnfektionsschutzgesetzes • lfSG) Im Falle eines Impfschadens besteht unter den Voraussetzungen des § 60 Absatz 1 lfSG ein Anspruch auf Entschädigung in entsprechender Anwendung der Vorschriften des Bundesversorgungsgesetzes. Der Antrag ist bei der für die Durchführung des Bundesversorgungsgesetzes zuständigen Behörde (§ 64 Absatz 1 lfSG, i.d.R. 'Versorgungsamt') zu stellen. Weitere Auskünfte erteilt das zuständige Gesundheitsamt."/> 
                </note>
                <protocolApplied>
                    <targetDisease>
                        <coding>
                            <system value ="http://snomed.info/sct"/>
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value ="840539006"/>
                            <display value ="Disease caused by Severe acute respiratory syndrome coronavirus 2 (disorder)">
                                <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                    <extension url ="content">
                                        <valueString value ="COVID-19 o.n.A."/>
                                    </extension>
                                </extension>
                            </display>         
                        </coding>
                    </targetDisease>
                    <doseNumberString>
                        <extension url ="http://hl7.org/fhir/StructureDefinition/data-absent-reason">
                            <valueCode value ="unknown"/>
                        </extension>
                    </doseNumberString>
                </protocolApplied>
            </Immunization>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:65ee3fb7-14f9-4a1f-86dc-66a06198cbdd"/>
        <resource>
            <Patient>
                <id value="65ee3fb7-14f9-4a1f-86dc-66a06198cbdd" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Patient|1.1.0" />
                </meta>
                <identifier>
                    <type>
                        <coding>
                            <system value="http://fhir.de/CodeSystem/identifier-type-de-basis" />
                            <code value="GKV" />
                            <display value ="Gesetzliche Krankenversicherung"/>
                        </coding>
                    </type>
                    <system value="http://fhir.de/NamingSystem/gkv/kvid-10" />
                    <value value="B783522772" />
                </identifier>
                <name>
                <use value="official" />
                    <text value="Wiebke Metzger" />
                    <family value="Metzger">
                        <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                            <valueString value="Metzger" />
                        </extension>
                    </family>
                    <given value="Wiebke" />
                </name>
                <gender value="female" />
                <birthDate value="2014-02-17" />
            </Patient>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:99e6a3d0-4287-4f80-9096-b45be72ad79c"/>
        <resource>
            <Practitioner>
                <id value="99e6a3d0-4287-4f80-9096-b45be72ad79c" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitioner|1.1.0" />
                </meta>
                <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Additional_Comment">
                <valueString value="Behandelnder Arzt" />
                </extension>
                <identifier>
                <type>
                    <coding>
                    <system value="http://terminology.hl7.org/CodeSystem/v2-0203" />
                    <code value="LANR" />
                    </coding>
                </type>
                <system value="https://fhir.kbv.de/NamingSystem/KBV_NS_Base_ANR" />
                <value value="520886234" />
                </identifier>
                <name>
                <use value="official" />
                <family value="Schulz">
                    <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                    <valueString value="Schulz" />
                    </extension>
                </family>
                <given value="Edgar" />
                <prefix value="Dr.">
                    <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier">
                    <valueCode value="AC" />
                    </extension>
                </prefix>
                </name>
                <telecom>
                <system value="phone" />
                <value value="+49(0)9853111893" />
                </telecom>
            <qualification>
                <code>
                    <coding>
                    <system value="https://fhir.kbv.de/CodeSystem/KBV_CS_SFHIR_BAR2_WBO" />
                    <code value="341" />
                    <display value="FA Kinder- und Jugendmedizin"/>
                    </coding>
                </code>
                </qualification>
            </Practitioner>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:a683c67d-665e-4da3-9083-daa5cb9d4e47"/>
        <resource>
            <PractitionerRole>
                <id value="a683c67d-665e-4da3-9083-daa5cb9d4e47" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitionerrole|1.1.0" />
                </meta>
                <practitioner>
                    <reference value="urn:uuid:99e6a3d0-4287-4f80-9096-b45be72ad79c" />
                </practitioner>
                <organization>
                    <reference value="urn:uuid:f6db1da6-8313-452a-bcc5-ac711bcb35b2" />
                </organization>
                </PractitionerRole>
        </resource>
    </entry>
</Bundle>",
        "<Bundle xmlns="http://hl7.org/fhir">
    <id value="40cc9188-bbd0-4003-91d7-776eae79bcab" />
    <meta>
        <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Bundle_Entry|1.1.0" />
    </meta>
    <identifier>
        <system value="urn:ietf:rfc:3986"/>
        <value value="urn:uuid:40cc9188-bbd0-4003-91d7-776eae79bcab"/>
    </identifier>
    <type value ="document"/>
    <timestamp value="2015-10-13T16:00:02Z"/>
    <entry>
        <fullUrl value="urn:uuid:c3f9f242-a1d9-4e21-bec7-c770b9929eeb"/>
        <resource>
            <Composition>
                <id value="c3f9f242-a1d9-4e21-bec7-c770b9929eeb" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Composition_Prime|1.1.0" />
                </meta>
                <text>
                    <status value ="extensions"/>
                    <div xmlns="http://www.w3.org/1999/xhtml">
                        <h1>Composition</h1>
                    </div>
                </text>
                <status value ="final"/>
                <type>
                    <coding>
                        <system value="http://loinc.org" />
                        <code value="11369-6" />
                        <display value="History of Immunization Narrative"/>
                    </coding>
                </type>
                <subject>
                    <reference value ="urn:uuid:85e72a0c-0e9b-4afe-a6f8-67157bd658ac"/>
                </subject>
                <date value="2015-10-13"/>
                <author>
                    <reference value="urn:uuid:a9554588-131d-4d6d-8305-2dede1fb5d2a"/>
                </author>
                <title value="Impfass"/>
                <section>
                    <code>
                        <coding>
                            <system value="http://snomed.info/sct" />
                            <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                            <code value="243796009:363589002=121258006" />
                            <display value="Situation with explicit context (situation) : Associated procedure (attribute) = Procedure to identify antibody (procedure)"/>
                        </coding>
                    </code>
                    <entry>
                        <reference value ="urn:uuid:f9b45bc8-a48e-422f-824c-4fda8010f0b2"/>
                    </entry>
                </section>
            </Composition>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:f9b45bc8-a48e-422f-824c-4fda8010f0b2"/>
        <resource>
            <Observation>
                <id value="f9b45bc8-a48e-422f-824c-4fda8010f0b2" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Observation_Immunization_Status|1.1.0" />
                </meta>
                <status value="final"/>
                <code>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="363787002:370134009=123029007,246093002=122450004,370132008=117363000,704319004=50863008,370130000=705057003,704327008=119364003"/>
                        <display value ="Observable entity (observable entity) : Time aspect (attribute) = Single point in time (qualifier value) , Component (attribute) = Antibody to hepatitis B virus (substance) , Scale type (attribute) = Ordinal value (qualifier value) , Inheres in (attribute) = Plasma (substance) , Property (attribute) = Presence (property) (qualifier value) , Direct site (attribute) = Serum specimen (specimen)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Hepatitis B Antikörpernachweis"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                    <coding>
                        <system value ="http://loinc.org"/>
                        <version value="2.69" />
                        <code value ="22322-2"/>
                        <display value ="Hepatitis B virus surface Ab [Presence] in Serum">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Hepatitis B Antikörpernachweis"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                </code>
                <subject>
                    <reference value ="urn:uuid:85e72a0c-0e9b-4afe-a6f8-67157bd658ac"/>
                </subject>
                <issued value="2015-10-13T16:00:02Z"/>
                <interpretation>
                    <coding>
                        <system value ="http://snomed.info/sct"/>
                        <version value="http://snomed.info/sct/900000000000207008/version/20210131" />
                        <code value ="365861007:363713009=10828004"/>
                        <display value ="Finding of immune status (finding) : Has interpretation (attribute) = Positive (qualifier value)">
                            <extension url ="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Terminology_German">
                                <extension url ="content">
                                    <valueString value ="Immunität erreicht"/>
                                </extension>
                            </extension>
                        </display>         
                    </coding>
                </interpretation>
                <note>
                    <text value="Titer bestimmt mit 113 IE / L"/>
                </note>
            </Observation>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:92017ba7-fcf2-443f-9c22-275a1209b6d6"/>
        <resource>
            <Organization>
                <id value="92017ba7-fcf2-443f-9c22-275a1209b6d6" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Organization|1.1.0" />
                </meta>
                <name value="Praxis Dr. Edgar Schulz" />
                <address>
                    <type value="both" />
                    <line value="Wladimir-Wiese-Straße 9/8">
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber">
                            <valueString value="9/8" />
                        </extension>
                        <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName">
                            <valueString value="Wladimir-Wiese-Straße" />
                        </extension>
                    </line>
                    <city value="Viersen" />
                    <postalCode value="37220" />
                    <country value="D" />
                </address>
            </Organization>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:85e72a0c-0e9b-4afe-a6f8-67157bd658ac"/>
        <resource>
            <Patient>
                <id value="85e72a0c-0e9b-4afe-a6f8-67157bd658ac" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Patient|1.1.0" />
                </meta>
                <identifier>
                    <type>
                        <coding>
                            <system value="http://fhir.de/CodeSystem/identifier-type-de-basis" />
                            <code value="GKV" />
                            <display value ="Gesetzliche Krankenversicherung"/>
                        </coding>
                    </type>
                    <system value="http://fhir.de/NamingSystem/gkv/kvid-10" />
                    <value value="B783522772" />
                </identifier>
                <name>
                <use value="official" />
                    <text value="Wiebke Metzger" />
                    <family value="Metzger">
                        <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                            <valueString value="Metzger" />
                        </extension>
                    </family>
                    <given value="Wiebke" />
                </name>
                <gender value="female" />
                <birthDate value="2014-02-17" />
            </Patient>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:a5475b8d-3088-41b6-a41b-8ac8afec176a"/>
        <resource>
            <Practitioner>
                <id value="a5475b8d-3088-41b6-a41b-8ac8afec176a" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitioner|1.1.0" />
                </meta>
                <extension url="https://fhir.kbv.de/StructureDefinition/KBV_EX_Base_Additional_Comment">
                <valueString value="Behandelnder Arzt" />
                </extension>
                <identifier>
                <type>
                    <coding>
                    <system value="http://terminology.hl7.org/CodeSystem/v2-0203" />
                    <code value="LANR" />
                    </coding>
                </type>
                <system value="https://fhir.kbv.de/NamingSystem/KBV_NS_Base_ANR" />
                <value value="520886234" />
                </identifier>
                <name>
                <use value="official" />
                <family value="Schulz">
                    <extension url="http://hl7.org/fhir/StructureDefinition/humanname-own-name">
                    <valueString value="Schulz" />
                    </extension>
                </family>
                <given value="Edgar" />
                <prefix value="Dr.">
                    <extension url="http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier">
                    <valueCode value="AC" />
                    </extension>
                </prefix>
                </name>
                <telecom>
                <system value="phone" />
                <value value="+49(0)9853111893" />
                </telecom>
            <qualification>
                <code>
                    <coding>
                    <system value="https://fhir.kbv.de/CodeSystem/KBV_CS_SFHIR_BAR2_WBO" />
                    <code value="341" />
                    <display value="FA Kinder- und Jugendmedizin"/>
                    </coding>
                </code>
                </qualification>
            </Practitioner>
        </resource>
    </entry>
    <entry>
        <fullUrl value="urn:uuid:a9554588-131d-4d6d-8305-2dede1fb5d2a"/>
        <resource>
            <PractitionerRole>
                <id value="a9554588-131d-4d6d-8305-2dede1fb5d2a" />
                <meta>
                    <profile value="https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_Vaccination_Practitionerrole|1.1.0" />
                </meta>
                <practitioner>
                    <reference value="urn:uuid:a5475b8d-3088-41b6-a41b-8ac8afec176a" />
                </practitioner>
                <organization>
                    <reference value="urn:uuid:92017ba7-fcf2-443f-9c22-275a1209b6d6" />
                </organization>
            </PractitionerRole>
        </resource>
    </entry>
</Bundle>"
    ]
}